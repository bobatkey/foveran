sem : Desc → Set → Set ;
sem = elimD (λx → Set → Set)
            (λA X → A)
            (λX → X)
            (λF G semF semG X → semF X × semG X)
            (λF G semF semG X → semF X + semG X);

lift : (D : Desc) →
       (α : Set) →
       (Φ : α → Set 2) →
       sem D α →
       Set 2 ;
lift D α Φ = elimD (\D → sem D α → Set 2)
                   (\A x → Unit)
                   (\x → Φ x)
                   (\F G f g x → f (fst x) × g (snd x))
                   (\F G f g x → case x for d. Set 2 with
                                   { inl y → f y
                                   ; inr z → g z
                                   })
                   D;

data Nat : Set :=
  | zero :
  | succ : Nat
  ;

data List (A : Set) : Set :=
  | nil  :
  | cons : A List
  ;

foldList : (A B : Set) → B → (A → B → B) → List A → B ;
foldList A B n c = induction (ListDesc A)
                             (λx → B)
                             (λx → case x for x. lift (ListDesc A) (List A) (λx → B) x → B with
                                     { inl u → λu' → n
                                     ; inr p → λp' → c (fst p) (snd p')
                                     });

length : (A : Set) → List A → Nat ;
length A = foldList A Nat zero (\a n → succ n) ;
