data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

--------------------------------------------------------------------------------
data List (A : Set) : Set where
  `nil  : List A
  `cons : A -> List A -> List A

map : (A B : Set) ->
      (A -> B) ->
      List A ->
      List B
map A B f l = recursionOn l with
  `nil.      `nil
  `cons a l. `cons (f a) (recurseOn l)

length : (A : Set) -> List A -> Nat
length A l = recursionOn l with
  `nil.      `zero
  `cons a l. `succ (recurseOn l)

append : (A : Set) -> List A -> List A -> List A
append A l1 l2 = recursionOn l1 with
  `nil. l2
  `cons a l. `cons a (recurseOn l)

symmetry : (A : Set) -> (a1 a2 : A) -> a1 == a2 -> a2 == a1
symmetry A a1 a2 eq = rewriteBy eq then refl

append-nil : (A : Set) -> (l : List A) -> append A l `nil == l
append-nil A l = inductionOn l with
  `nil.      refl
  `cons a l.
    -- have inductionHypothesisFor l : append A l `nil == l and
    -- goalIs `cons a (append A l `nil) == `cons a l so
    rewriteBy symmetry (List A) (append A l `nil) l (inductionHypothesisFor l) then
    refl

append-assoc :
  (A : Set) ->
  (l1 l2 l3 : List A) ->
  append A l1 (append A l2 l3) == append A (append A l1 l2) l3
append-assoc A l1 l2 l3 = inductionOn l1 with
  `nil.      refl
  `cons a l. rewriteBy inductionHypothesisFor l then refl

reverse-body : (A : Set) -> List A -> List A -> List A
reverse-body A l = recursionOn l with
  `nil.      \acc. acc
  `cons a l. \acc. recurseOn l (`cons a acc)

reverse : (A : Set) -> List A -> List A
reverse A l = reverse-body A l `nil

slowreverse : (A : Set) -> List A -> List A
slowreverse A l = recursionOn l with
  `nil.      `nil
  `cons a l. append A (recurseOn l) (`cons a `nil)

lem : (A : Set) -> (l1 l2 : List A) -> reverse-body A l1 l2 == append A (slowreverse A l1) l2
lem A l1 = inductionOn l1 with
  `nil. \l2. refl
  `cons a l. \l2.
    rewriteBy append-assoc A (slowreverse A l) (`cons a `nil) l2 then
    rewriteBy inductionHypothesisFor l (`cons a l2) then
    refl

reverses-agree : (A : Set) -> (l : List A) -> reverse A l == slowreverse A l
reverses-agree A l =
  rewriteBy symmetry (List A) (reverse-body A l `nil) (append A (slowreverse A l) `nil) (lem A l `nil) then 
  rewriteBy symmetry (List A) (append A (slowreverse A l) `nil) (slowreverse A l) (append-nil A (slowreverse A l)) then
  refl

--------------------------------------------------------------------------------
data Bool : Set where
  `true  : Bool
  `false : Bool

data Maybe (A : Set) : Set where
  `nothing : Maybe A
  `just    : A -> Maybe A

find : (A : Set) -> (predicate : A -> Bool) -> List A -> Maybe A
find A predicate l =
  recursionOn l with
    `nil. `nothing
    `cons a l. casesOn predicate a with
      `true. `just a
      `false. recurseOn l

filter : (A : Set) -> (predicate : A -> Bool) -> List A -> List A
filter A predicate l =
  recursionOn l with
    `nil. `nil
    `cons a l. casesOn predicate a with
      `true.  `cons a (recurseOn l)
      `false. recurseOn l

isNil : (A : Set) -> List A -> Bool
isNil A l = casesOn l with { `nil. `true; `cons a l. `false }

--------------------------------------------------------------------------------
data IsTrue : Bool -> Set where
  `yes : IsTrue `true

All : (A : Set) ->
      (P : A -> Set) ->
      List A ->
      Set
All A P l = recursionOn l with
  `nil. Unit
  `cons a l. P a × recurseOn l

data Either (A : Set) (B : Set) : Set where
  `left  : A -> Either A B
  `right : B -> Either A B

informative-bool : (b : Bool) -> Either (`true : Bool == b) (`false : Bool == b)
informative-bool b =
  casesOn b with
    `true.  `left refl
    `false. `right refl

filter-lem : (A : Set) ->
             (predicate : A -> Bool) ->
             (l : List A) ->
             All A (\a. IsTrue (predicate a)) (filter A predicate l)
filter-lem A predicate l =
  inductionOn l with
    `nil. ()
    `cons a l.
      casesOn informative-bool (predicate a) with
        `left isTrue.
          rewriteBy isTrue then
          rewriteBy isTrue then
          «`yes,inductionHypothesisFor l»
        `right isFalse.
          rewriteBy isFalse then
          inductionHypothesisFor l

--------------------------------------------------------------------------------
;
