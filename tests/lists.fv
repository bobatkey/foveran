data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

--------------------------------------------------------------------------------
data List (A : Set) : Set where
  `nil  : List A
  `cons : A -> List A -> List A

elimList :
  (A : Set) ->
  (P : List A -> Set 2) ->
  (P `nil) ->
  ((a : A) -> (l : List A) -> P l -> P (`cons a l)) ->
  (l : List A) ->
  P l
elimList A P pnil pcons l =
  eliminate l with _ «constructor,arguments» p.
    generalise p then
    generalise arguments then
    case constructor with
      { inl _. λeq       _.     rewriteBy eq then pnil
      ; inr _. λ«a,l,eq» «p,_». rewriteBy eq then pcons a l p
      }

map : (A B : Set) ->
      (A -> B) ->
      List A ->
      List B
map A B f l =
  eliminate l with _ «c,d» p.
    generalise p then
    generalise d then
    case c with
      { inl _. \eq         _.          `nil
      ; inr _. \«a, l, eq» «map_l, _». `cons (f a) map_l
      }

length : (A : Set) -> List A -> Nat
length A l =
  eliminate l with _ «c,d» p.
    generalise p then
    generalise d then
    case c with
      { inl _. \_ _.             `zero
      ; inr _. \_ «length_l, _». `succ length_l
      }

append : (A : Set) -> List A -> List A -> List A
append A l1 l2 =
  eliminate l1 with _ «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \_       _.      l2
      ; inr _. \«a,_,_» «xs,_». `cons a xs
      }

;
