data Nat : Set :=
  | zero :
  | succ : Nat
  ;

data List (A : Set) : Set :=
  | nil  :
  | cons : A List
  ;

foldList : (A B : Set) → B → (A → B → B) → List A → B ;
foldList A B n c = induction (ListDesc A)
                             (λx. B)
                             (λx. case x for x. lift (ListDesc A) (List A) (λx. B) x → B with
                                     { inl u. λu'. n
                                     ; inr p. λp'. c (fst p) (snd p')
                                     });

length : (A : Set) → List A → Nat ;
length A = foldList A Nat zero (\a n. succ n) ;
