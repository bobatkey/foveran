data Type : Set where
  `base : Type
  `arr  : Type -> Type -> Type

semType : Type -> Set -> Set
semType T A =
  eliminate T with _ «constructor,arguments» p.
    generalise p then
    generalise arguments then
    case constructor with
      { inl _. λ_           _.           A
      ; inr _. λ«t1, t2, _» «S1, S2, _». S1 -> S2
      }

-- semType : Type -> Set -> Set
-- semType T A = 
--   by_structural_recursion_on T with
--     `base.      A
--     `arr T1 T2. (recurseOn T1) -> (recurseOn T2)

--------------------------------------------------------------------------------
data Context : Set where
  `eps : Context
  `ext : Context -> Type -> Context

semContext : Context -> Set -> Set
semContext C A =
  eliminate C with _ «constructor,arguments» p.
    generalise p then
    generalise arguments then
    case constructor with
      { inl _. λ_         _.       Unit
      ; inr _. λ«G, T, _» «GS, _». GS × semType T A
      }

--------------------------------------------------------------------------------
eq1 : (A B : Set) ->
      (a c : A) -> (b d : B) ->
      «a,b» : (A × B) == «c,d» : (A × B) ->
      a == c
eq1 A B a c b d eq =
  rewriteBy eq for x p. a == fst x then refl

eq2 : (A B : Set) ->
      (a c : A) -> (b d : B) ->
      «a,b» : (A × B) == «c,d» : (A × B) ->
      b == d
eq2 A B a c b d eq =
  rewriteBy eq for x p. b == snd x then refl;

--------------------------------------------------------------------------------
data Index : Context × Type -> Set where
  `here : (G : Context) -> (T : Type) ->                               Index «`ext G T, T»
  `next : (G : Context) -> (S : Type) -> (T : Type) -> Index «G, T» -> Index «`ext G S, T»

lookup : (A : Set) -> (G : Context) -> (T : Type) -> Index «G,T» -> semContext G A -> semType T A
lookup A G T v =
  eliminate v for «G,T» v. semContext G A -> semType T A
  with «G,T» «constructor,arguments» p.
    generalise p then
    generalise arguments then
    case constructor with
      { inl _. \«G', T', eq» _.
        rewriteBy eq1 Context Type (`ext G' T') G T' T eq then
        rewriteBy eq2 Context Type (`ext G' T') G T' T eq then
        \«_, x». x
      ; inr _. \«G', S, T', v, eq» «recurse, _». 
        rewriteBy eq1 Context Type (`ext G' S) G T' T eq then
        rewriteBy eq2 Context Type (`ext G' S) G T' T eq then
        \«env, _». recurse env
      }

--------------------------------------------------------------------------------
– data Index2 (T : Type) : Context -> Set where
–  here2 : (G : Context) -> Index2 T (ext G T)
–  next2 : (G : Context) -> (S : Type) -> Index2 T G -> Index2 T (ext G S)

--------------------------------------------------------------------------------
data Term : Context × Type -> Set where
  `var : (G : Context) ->
         (T : Type) ->
         Index «G,T» ->
         Term «G,T»
  `lam : (G : Context) ->
         (S : Type) ->
         (T : Type) ->
         Term «`ext G S, T» ->
         Term «G, `arr S T»
  `app : (G : Context) ->
         (S : Type) ->
         (T : Type) ->
         Term «G, `arr S T» ->
         Term «G, S» ->
         Term «G, T»

--------------------------------------------------------------------------------
eval : (A : Set) ->
       (G : Context) ->
       (T : Type) ->
       Term «G, T» ->
       semContext G A ->
       semType T A
eval A G T tm =
  eliminate tm for «G,T» tm. semContext G A -> semType T A
  with «G,T» «constructor,arguments» p.
    generalise p then
    generalise arguments then
    case constructor with
      { inl _. \«G', T', v, eq» _.
        rewriteBy eq1 Context Type G' G T' T eq then
        rewriteBy eq2 Context Type G' G T' T eq then
        \env. lookup A G' T' v env
      ; inr constructor.
        case constructor with
          { inl _. \«G', S, T', tm, eq» «recurse, _».
            rewriteBy eq1 Context Type G' G (`arr S T') T eq then
            rewriteBy eq2 Context Type G' G (`arr S T') T eq then
            \env. \x. recurse «env, x»
          ; inr _. \«G', S, T', tm1, tm2, eq» «recurse1, recurse2, _».
            rewriteBy eq1 Context Type G' G T' T eq then
            rewriteBy eq2 Context Type G' G T' T eq then
            \env. (recurse1 env) (recurse2 env)
          }
      }

-- byStructuralRecursionOn tm with
--   `var G T v.       \env. lookup A G T v
--   `lam G T tm.      \env. \x. recurseOn tm (env, x)
--   `app G T tm1 tm2. \env. recurseOn tm1 env (recurseOn tm2 env)

term : Term «`eps, `arr `base `base»
term = `lam `eps `base `base (`var (`ext `eps `base) `base (`here `eps `base))

term2 : Term «`eps, `arr (`arr `base `base) (`arr `base `base)»
term2 = `lam `eps (`arr `base `base) (`arr `base `base)
             (`var (`ext `eps (`arr `base `base)) (`arr `base `base)
                   (`here `eps (`arr `base `base)))

assume A : Set

normalise eval A `eps (`arr `base `base) term ()
normalise eval A `eps (`arr (`arr `base `base) (`arr `base `base)) term2 ()

;