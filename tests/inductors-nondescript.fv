sem : Desc → Set → Set ;
sem = elimD (λx. Set → Set)
            (λA X. A)
            (λX. X)
            (λF G semF semG X. semF X × semG X)
            (λF G semF semG X. semF X + semG X);

lift : (D : Desc) →
       (α : Set) →
       (Φ : α → Set 2) →
       sem D α → Set 2 ;
lift D α Φ = elimD (\D. sem D α → Set 2)
                   (\A x. Unit)
                   (\x. Φ x)
                   (\F G f g x. f (fst x) × g (snd x))
                   (\F G f g x. case x for d. Set 2 with
                                   { inl y. f y
                                   ; inr z. g z
                                   })
                   D;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
deconstruct : (D : Desc) → µ D → sem D (µ D);
deconstruct D = induction D (λx. sem D (µ D)) (λx p. x);

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
inductor : Set → Set 3;
inductor A = (H : (A → Set 2) → A → Set 2) ×
             ((Φ : A → Set 2) → ((x : A) → H Φ x → Φ x) → (x : A) → Φ x);

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
desc-inductor : (D : Desc) → inductor (µ D);
desc-inductor D = « λΦ x. lift D (µ D) Φ (deconstruct D x)
                  , λΦ k. induction D Φ (λx p. k (construct x) p)
                  »;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
lex-inductor : (A : Set) → inductor A →
               (B : Set) → inductor B →
               inductor (A × B);
lex-inductor A AI B BI =
  « λΦ p.   fst AI (λa. (b : B) → Φ «a,b») (fst p)
           × fst BI (λb. Φ «fst p,b») (snd p)
  , λΦ k p. snd AI (λa. (b : B) → Φ «a,b»)
                    (λa φa. snd BI (λb. Φ «a,b»)
                                    (λb φb. k «a,b» «φa, φb»))
                    (fst p)
                    (snd p)
  »;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
– let's assume that the induction hypothesis constructor is a functor
– this will be easier if we assume that it is an indexed description
assume map : (A : Set) →
             (AI : inductor A) →
             (Φ Ψ : A → Set 2) →
             (f : (a : A) → Φ a → Ψ a) →
             (a : A) → fst AI Φ a → fst AI Ψ a;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
pair-inductor : (A : Set) → inductor A →
                (B : Set) → inductor B →
                inductor (A × B);
pair-inductor A AI B BI =
  « λΦ p.   fst AI (λa. Φ «a,snd p») (fst p)
           × fst BI (λb. Φ «fst p,b») (snd p)
  , λΦ k p. snd AI (λa. (b : B) → Φ «a,b»)
                    (λa φa. snd BI (λb. Φ «a,b»)
                                    (λb φb. k «a,b»
                                               « map A AI (λa. (b : B) → Φ «a,b»)
                                                          (λa. Φ «a,b»)
                                                          (λa f. f b)
                                                          a
                                                          φa
                                               , φb
                                               »))
                    (fst p)
                    (snd p)
  »;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
flat : (A : Set) → inductor A;
flat A = « λΦ x. Unit
         , λΦ k x. k x ⋄
         »;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
– adding tops and bottoms
maybe : Set → Set;
maybe A = Unit + A;

with-bottom : (A : Set) → inductor A → inductor (maybe A);
with-bottom A AI =
  « λΦ x. case x for x. Set 2 with
             { inl u. (a : A) → Φ (inr a)
             ; inr a. fst AI (λa. Φ (inr a)) a
             }
  , λΦ k x. case x for x. Φ x with
               { inl u. k (inl u) (snd AI (λa. Φ (inr a)) (λa φ. k (inr a) φ))
               ; inr a. snd AI (λa. Φ (inr a)) (λa φ. k (inr a) φ) a
               }
  »;

with-top : (A : Set) → inductor A → inductor (maybe A);
with-top A AI =
  « λΦ x. case x for x. Set 2 with
             { inl u. Unit
             ; inr a. fst AI (λa. Φ (inr a)) a × Φ (inl ⋄)
             }
  , λΦ k x. case x for x. Φ x with
               { inl u. k (inl u) ⋄
               ; inr a. snd AI (λa. Φ (inr a)) (λa φ. k (inr a) «φ, k (inl ⋄) ⋄») a
               }
  »;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
comonad : Set → Set 3;
comonad A = (W      : (A → Set 2) → (A → Set 2)) ×
            (counit : (P : A → Set 2) → (a : A) → W P a → P a) ×
            (cojoin : (P : A → Set 2) → (a : A) → W P a → W (W P) a) ×
            (map    : (P Q : A → Set 2) → ((a : A) → P a → Q a) → (a : A) → W P a → W Q a) ×
            Unit;

counit : (A : Set) → (W : comonad A) → (P : A → Set 2) → (a : A) → fst W P a → P a;
counit A W = fst (snd W);

cojoin : (A : Set) → (W : comonad A) → (P : A → Set 2) → (a : A) → fst W P a → fst W (fst W P) a;
cojoin A W = fst (snd (snd W));

mapW : (A : Set) → (W : comonad A) → (P Q : A → Set 2) → ((a : A) → P a → Q a) → (a : A) → fst W P a → fst W Q a;
mapW A W = fst (snd (snd (snd W)));

comonadic-inductor : (A  : Set) →
                     (W  : comonad A) →
                     (AI : inductor A) →
                     (d  : (P : A → Set 2) →
                           (a : A) →
                           fst AI (fst W P) a →
                           fst W (fst AI P) a) →
                     inductor A;
comonadic-inductor A W AI d =
  « λΦ. fst AI (fst W Φ)
  , λΦ k a. counit A W Φ a (snd AI (fst W Φ)
                                 (λa φ. mapW A W
                                              (fst AI (fst W Φ))
                                              Φ
                                              k
                                              a
                                              (d (fst W Φ)
                                                 a
                                                 (map A AI
                                                      (fst W Φ)
                                                      (fst W (fst W Φ))
                                                      (cojoin A W Φ)
                                                      a
                                                      φ)))
                                 a)
  »;