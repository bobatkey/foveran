comonad : Set -> Set 1;
comonad A = (W      : (A -> Set) -> (A -> Set)) ×
            (counit : (P : A -> Set) -> (a : A) -> W P a -> P a) ×
            (cojoin : (P : A -> Set) -> (a : A) -> W P a -> W (W P) a) ×
            (map    : (P Q : A -> Set) -> (a : A) -> W P a -> W Q a) ×
            Unit ;

F : (A : Set) -> comonad A -> (A -> Set) -> (A -> Set) ;
F A W = fst W ;

counit : (A : Set) -> (W : comonad A) -> (P : A -> Set) -> (a : A) -> F A W P a -> P a ;
counit A W = fst (snd W) ;

cojoin : (A : Set) -> (W : comonad A) -> (P : A -> Set) -> (a : A) -> F A W P a -> F A W (F A W P) a ;
cojoin A W = fst (snd (snd W)) ;

coMap : (A : Set) -> (W : comonad A) -> (P Q : A -> Set) -> (a : A) -> F A W P a -> F A W Q a ;
coMap A W = fst (snd (snd (snd W))) ;
