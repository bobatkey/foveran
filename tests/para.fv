data Ty : Set where
  `v   : Ty
  `arr : Ty -> Ty -> Ty

ty-sem : Ty -> Set -> Set
ty-sem ty A = recursionOn ty with
  `v.           A
  `arr ty1 ty2. recurseOn ty1 -> recurseOn ty2

data Ctxt : Set where
  `emp  : Ctxt
  `cons : Ty -> Ctxt -> Ctxt

ctxt-sem : Ctxt -> Set -> Set
ctxt-sem G A = recursionOn G with
  `emp.       Unit
  `cons ty G. ty-sem ty A × recurseOn G


ty-pred : (ty : Ty) -> (A : Set) -> (P : A -> Set) -> ty-sem ty A -> Set
ty-pred ty A P = recursionOn ty with
  `v.           \a. P a
  `arr ty1 ty2. \f. (a : ty-sem ty1 A) -> recurseOn ty1 a -> recurseOn ty2 (f a)

ctxt-pred : (G : Ctxt) -> (A : Set) -> (P : A -> Set) -> ctxt-sem G A -> Set
ctxt-pred G A P = recursionOn G with
  `emp.       \_.     Unit
  `cons ty G. \«x,g». ty-pred ty A P x × recurseOn G g


assume param : (G : Ctxt) ->
               (t : Ty) ->
               (x : (A : Set) -> ctxt-sem G A -> ty-sem t A) ->
               (A : Set) ->
               (P : A -> Set) ->
               (g : ctxt-sem G A) ->
               ctxt-pred G A P g ->
               ty-pred t A P (x A g);

church-nat : Set 1;
church-nat = (A : Set) -> A -> (A -> A) -> A;

zero : church-nat ;
zero A z s = z;

succ : church-nat -> church-nat ;
succ n A z s = s (n A z s);


-- interestingly, we can't do induction over church-nat to prove a
-- predicate on church-nats. This would require impredicativity?
-- this isn't surprising.
church-nat-induction : (A : Set) ->
                       (z : A) ->
                       (s : A -> A) ->
                       (P : A -> Set) ->
                       (P z) ->
                       ((n : A) -> P n -> P (s n)) ->
                       (n : church-nat) -> P (n A z s);
church-nat-induction A z s P pz ps n =
   param `emp (`arr `v (`arr (`arr `v `v) `v))
         (λA u. n A)
         A
         P
         ()
         ()
         z pz
         s ps;
