-- descriptions of differentiable datatypes
data DiffDesc : Set where
  `K1    : DiffDesc
  `K0    : DiffDesc
  `Id    : DiffDesc
  `Sum   : DiffDesc -> DiffDesc -> DiffDesc
  `Times : DiffDesc -> DiffDesc -> DiffDesc
  `D     : DiffDesc

toIDesc : DiffDesc -> Set -> Unit -> IDesc Unit
toIDesc D A _ = recursionOn D with
  { `K1. "K" Unit
  ; `K0. "K" Empty
  ; `Id. "IId" ()
  ; `Sum D1 D2. "Sg" (Unit + Unit) (\c. case c with { inl _. recurseOn D1; inr _. recurseOn D2 })
  ; `Times D1 D2. recurseOn D1 “×” recurseOn D2
  ; `D. "K" A
  }

differentiate : DiffDesc -> DiffDesc
differentiate D = recursionOn D with
  { `K1.          `K0
  ; `K0.          `K0
  ; `Id.          `K1
  ; `Times D1 D2. `Sum (`Times (recurseOn D1) D2) (`Times D1 (recurseOn D2))
  ; `Sum D1 D2.   `Sum (recurseOn D1) (recurseOn D2)
  ; `D.           `K0
  }

listD : DiffDesc
listD = `Sum `K1 (`Times `D `Id)

--------------------------------------------------------------------------------
up :
  (D : DiffDesc) ->
  (A X : Set) ->
  X ->
  semI[toIDesc (differentiate D) A (), _. X] ->
  semI[toIDesc D A (), _. X]
up D A X x =
  recursionOn D with
    { `K1. \d. absurdBy d
    ; `K0. \d. absurdBy d
    ; `Id. \_. x
    ; `Times D1 D2. \«c,d».
      generalise d then
      case c with
        { inl _. \«d1,d2». «recurseOn D1 d1, d2»
        ; inr _. \«d1,d2». «d1, recurseOn D2 d2»
        }
    ; `Sum D1 D2. \«c,d».
      generalise d then
      case c with
        { inl _. \d. «inl (), recurseOn D1 d»
        ; inr _. \d. «inr (), recurseOn D2 d»
        }
    ; `D. \d. absurdBy d
    }

--------------------------------------------------------------------------------
data List (A : Set) : Set where
  `nil  : List A
  `cons : A -> List A -> List A

Ctx : DiffDesc -> (A : Set) -> Set
Ctx D A = List (semI[toIDesc (differentiate D) A (), _. muI Unit (toIDesc D A) ()])

plug : (D : DiffDesc) -> (A : Set) -> Ctx D A -> muI Unit (toIDesc D A) () -> muI Unit (toIDesc D A) () 
plug D A ctx x =
  recursionOn ctx with
    { `nil. x
    ; `cons ctx_part rest.
      construct (up D A (muI Unit (toIDesc D A) ()) (recurseOn rest) ctx_part)
    }

--------------------------------------------------------------------------------
Div : DiffDesc -> DiffDesc
Div D = `Times `Id (differentiate D)

down : (D : DiffDesc) ->
       (A X : Set) ->
       semI[toIDesc D A (), i. X] ->
       semI[toIDesc D A (), i. semI[toIDesc (Div D) A (), i. X]]
down D A X =
  recursionOn D with
    { `K0. \e. e
    ; `K1. \_. ()
    ; `Id. \x. «x,()»
    ; `Sum D1 D2.
      \«c,d».
      generalise d then
      case c with
        { inl _. \d.
          «inl (), mapI[toIDesc D1 A (),
                        _. semI[toIDesc (Div D1) A (), i. X],
                        _. semI[toIDesc (Div (`Sum D1 D2)) A (), i. X],
                        \_ «x,dx». «x, «inl (), dx»»,
                        recurseOn D1 d]
          »
        ; inr _. \d.
          «inr (), mapI[toIDesc D2 A (),
                        _. semI[toIDesc (Div D2) A (), i. X],
                        _. semI[toIDesc (Div (`Sum D1 D2)) A (), i. X],
                        \_ «x,dx». «x, «inr (), dx»»,
                        recurseOn D2 d]
          »
        }
    ; `Times D1 D2.
      \«x,y».
      « mapI[toIDesc D1 A (),
             _. semI[toIDesc (Div D1) A (), i. X],
             _. semI[toIDesc (Div (`Times D1 D2)) A (), i. X],
             \_ «x',y'». «x', «inl (), «y', y»»»,
             recurseOn D1 x]
      , mapI[toIDesc D2 A (),
             _. semI[toIDesc (Div D2) A (), i. X],
             _. semI[toIDesc (Div (`Times D1 D2)) A (), i. X],
             \_ «x',y'». «x', «inr (), «x, y'»»»,
             recurseOn D2 y]
      »
    ; `D.  \a. a
    }

;