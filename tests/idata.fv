data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

Nat:elim :
  (P : Nat -> Set 2) ->
  P `zero ->
  ((n : Nat) -> P n -> P (`succ n)) ->
  (n : Nat) ->
  P n
Nat:elim P pzero psucc n =
  eliminate n with _ «c,d» p.
    generalise p then
    generalise d then
    case c with
      { inl _. \eq      _.      rewriteBy eq then pzero
      ; inr _. \«n, eq» «p, _». rewriteBy eq then psucc n p
      }

add3 : Nat -> Nat -> Nat
add3 n1 n2 =
  eliminate n1 with _ «c,d» p.
    generalise p then
    generalise d then
    case c with
      { inl _. λ_ _. n2
      ; inr _. λ_ «p,_». `succ p
      }

normalise add3 (`succ `zero) (`succ `zero)

-- Hack: 'foo is a constructor
--    'foo x y z gets translated to construct «'foo', x, y, z, refl»
--    Now, 'foo' gets to look at the type being pushed in, and magically selects the correct injection...

-- types of the form Unit + Unit + Unit are annotated with
-- (non-namespaced!) names.

{-
What does 'eliminate x with { cons1 a b c. M1; ...; consn d e f. Mn } do?

1) Check that the type of 'x' is of the form VMuI tyI vDesc vI
2) Compute vDesc $$ vI to yield a description, and check that it has the form 
   “Σ” (Unit + ... + Unit) body
3) For each constructor, there must be a clause (in order)
   3a) Check that this clause has the right number of arguments for the 
   3b) generate λ«a,b,c,eq» «pb,pc,_». rewriteBy eq then <body> for each clause, with the pb/pc correctly substituted in <body>
4) generate the full case expression, with the correct elimtype for the return type

Or, possibly:
  implement 'generalise d then' tactic, which moves something in the context to the goal
  then the automatic generalisation of 'case' will work mor easily, I think

  generalise x then M ==> (M : typeof(x) -> Goaltype) x

  as long as 'x' is in the local context. Are there any restrictions on the free variables in 'x'?

  (λi «c,d». generalise d then case c with { inl _. λeq _. m1; inr _. λ«n,eq» «pn, _». m2 })

Implement 'recurseOn' using special stuff in the locally nameless
converter. Could also consider naming the eliminator uses...

Later:
  Do clever things like elimination with a motive...

-}

{-
vecappend : (A : Set) -> (n₁ n₂ : Nat) -> Vector A n₁ -> Vector A n₂ -> Vector A (add n₁ n₂)
vecappend A n₁ n₂ xs ys =
  eliminate xs with
    vnil.         ys
    vcons n a xs. vcons (add n n₂) a (recurse xs)

vechead : (A : Set) -> (n : Nat) -> Vector A (succ n) -> A
vechead A n xs = eliminate xs with
  vnil. -- empty case
  vcons n a xs. a

acceptsEmpty : (A : Set) -> regexp A -> Bool;
acceptsEmpty A re =
  eliminate re with
    eps.         true
    emp.         false
    alt re₁ re₂. or (recurse re₁) (recurse re₂)
    seq re₁ re₂. and (recurse re₁) (recurse re₂)
    star re.     true
    tok a.       false

step : (A : Set) -> regexp A -> A -> regexp A
step A re a =
  eliminate re with
    eps:
      emp
    emp:
      emp
    alt re₁ re₂:
      alt (recurse re₁) (recurse re₂)
    seq re₁ re₂:
      eliminate acceptsEmpty re₁ with
        true:  alt (seq (recurse re₁) re₂) (recurse re₂)
        false: seq (recurse re₁) re₂
    star re:
      seq (recurse re) (star re)
    tok a':
      eliminate symbol-eq a a' with
        true:  eps
        false: emp

matches : (A : Set) -> List A -> regexp A -> bool
matches by
  introduce A l.
  eliminate l with
    nil:      introduce r. acceptsEmpty A r
    cons a l: introduce r. recurse l (step A r a)

1. look at the type of the thing being looked at
2. Check that it is of the form µI I (λi. “Σ“ (1 + ... + 1) (λb. body)) i
3. Generate a case elimination with the appropriate cases, just ignoring the names for now
4. The patterns get compiled into projections, with a rewrite. So we assume that all the 
5. The "recurse x" things get rewritten somehow, in a later step...

-}

data Bool : Set where
  `true  : Bool
  `false : Bool

normalise Bool

one : Nat
one = `succ `zero

{-
normalise
  add one one
-}

{-
introduce P pzero psucc n.
eliminate n with
  zero.   pzero
  succ n. psucc n (recurse n)

introduce n₁ n₂.
eliminate[plus] n₁ with
  zero.   n₂
  succ n. succ (plus n)

introduce n₁.
eliminate[plus] n₁ with
  zero.   introduce n₂. n₂
  succ n. introduce n₂. succ (plus n n₂)

These last three look at the form of the datatype, and use it to
generate the code above. The name of the eliminator tells it how to
translate the recusive calls into references to the proof objects.

To do: deeper recursion, probably with the generic sub-term relation.

To do: elimination-with-a-motive-style enhancing of the inductive
premise and removal of cases that are impossible. Could implement this
with a "ElimEq"-style tactic that attempts to get rid of as many
equalities from the context as possible.

"introduce" should emit a warning if a function type has a name, but
we use a different name in the code.

How would "with" work? If you do something like
  with isZero n
then you either get back a proof that 'n' is zero, or a new number 'm'
and a proof that n = succ m. The plan then is to rewrite all the
hypotheses to include this new information. This could be done with a
new tactic.

-}

data List (A : Set) : Set where
  `nil  : List A
  `cons : A -> List A -> List A

data Vector (A : Set) : Nat -> Set where
  `vnil  : Vector A `zero
  `vcons : (n : Nat) -> A -> Vector A n -> Vector A (`succ n)

--------------------------------------------------------------------------------
Vector:elim :
  (A : Set) ->
  (P : (n : Nat) -> Vector A n -> Set 20) ->
  P `zero `vnil ->
  ((n : Nat) -> (a : A) -> (xs : Vector A n) -> P n xs -> P (`succ n) (`vcons n a xs)) ->
  (n : Nat) ->
  (xs : Vector A n) ->
  P n xs
Vector:elim A P prf_nil prf_cons n xs =
  eliminate xs with
    n «constructor, arguments» p.
      generalise p then
      generalise arguments then
      case constructor with
        { inl _. \eq              _.      rewriteBy eq then prf_nil
        ; inr _. \«n', a, xs, eq» «p, _». rewriteBy eq then prf_cons n' a xs p
        }

------------------------------------------------------------------------------
data Emp : Set where

Emp:elim : (P : Emp -> Set) -> (e : Emp) -> P e
Emp:elim P e =
  eliminate e with
    _ «constructor, arguments» p.
      absurdBy constructor

------------------------------------------------------------------------------
data regexp (A : Set) : Set where
  `eps  : regexp A
  `emp  : regexp A
  `alt  : regexp A -> regexp A -> regexp A
  `seq  : regexp A -> regexp A -> regexp A
  `star : regexp A -> regexp A
  `tok  : A -> regexp A

data Fin : Nat -> Set where
  `fz : (n : Nat) -> Fin (`succ n)
  `fs : (n : Nat) -> Fin n -> Fin (`succ n)

{-

{-
data Foo : Unit -> Set where
  { foo1 : Foo ()
  ; foo2 : Foo ()
  ; foo3 : Foo ()
  ; foo4 : Foo () -> Foo ()
  };
-}

{-
assume lt : Nat () -> Nat () -> Set;

data Acc : Nat () -> Set where
  { acc : (n : Nat ()) -> ((n' : Nat ()) -> lt n' n -> Acc n') -> Acc n
  };
-}

{-
data Acc2 (A : Set) (lt : A -> A -> Set) : A -> Set where
  { acc2 : (a : A) -> ((a' : A) -> lt a' a -> Acc2 A lt a') -> Acc2 A lt a
  };

assume acc2ty :
  (A : Set) ->
  (lt : A -> A -> Set) ->                       -- parameters

  (Φ : (a : A) -> Acc2 A lt a -> Set) ->        -- predicate

  (a : A) ->
  (f : (a' : A) -> lt a' a -> Acc2 A lt a') ->  -- constructor arguments

  ((a' : A) -> (x : lt a' a) -> Φ a' (f a' x)) -> -- induction hypotheses

  Φ a (acc2 A lt a f);                            -- result
-}

data Eq (A : Set) (a : A) : A -> Set where
  `reflexivity : Eq A a a

-- normalise Eq

;