data Nat : Set :=
  | zero :
  | succ : Nat
;

data List (A : Set) : Set :=
  | nil  :
  | cons : A List
;

data Tree (A : Set) : Set :=
  | leaf  : A
  | node1 : Tree Tree
  | node2 : Tree Tree Tree
  ;

foldList : (A B : Set) → B → (A → B → B) → List A → B ;
foldList A B n c = induction (ListDesc A)
                             (λx. B)
                             (λx. case x for x. lift (ListDesc A) (List A) (λx. B) x → B with
                                     { inl u. λu'. n
                                     ; inr p. λp'. c (fst p) (snd p')
                                     });

length : (A : Set) → List A → Nat ;
length A = foldList A Nat zero (\a n. succ n) ;

append : (A : Set) → List A → List A → List A ;
append A = foldList A (List A → List A)
                    (λy. y)
                    (λa f y. cons A a (f y));

map : (A B : Set) → (A → B) → List A → List B ;
map A B f = foldList A (List B)
                     (nil B)
                     (\a t. cons B (f a) t) ;
