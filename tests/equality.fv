-- leibniz equality can be defined as an inhabitant of Set 1

-- but we can't prove that it is equivalent to the identity without
-- parametricity (and identity extension, I think, which would require
-- equality to state anyways)

leibniz : (A : Set) -> A -> A -> Set 1;
leibniz A a1 a2 = (F : A -> Set) -> F a1 -> F a2;

leibniz2 : (X : Set) -> (A : X -> Set) -> (x : X) -> A x -> (x' : X) -> A x' -> Set 1;
leibniz2 X A x a x' a' = (F : (x : X) -> A x -> Set) -> F x a -> F x' a';

cart2 : (X : Set) -> (A : X -> Set) -> (x : X) -> A x -> (x' : X) -> A x' -> Set 1;
cart2 X A x a x' a' = (R : (x x' : X) -> A x -> A x' -> Set) -> ((x : A) -> (a : A x) -> R x x a a) -> R x x' a a';

reflexivity : (A : Set) -> (a : A) -> leibniz A a a;
reflexivity A a = \F x. x;

symm : (A : Set) -> (a1 a2 : A) -> leibniz A a1 a2 -> leibniz A a2 a1;
symm A a1 a2 e = \F x. e (\a. F a -> F a1) (\x. x) x;

trans : (A : Set) -> (a1 a2 a₃ : A) -> leibniz A a1 a2 ->
                                     leibniz A a2 a₃ ->
                                     leibniz A a1 a₃;
trans A a1 a2 a₃ e1 e2 = \F x. e2 F (e1 F x);

subst : (A : Set) -> (F : A -> Set) -> (a1 a2 : A) -> leibniz A a1 a2 -> F a1 -> F a2;
subst A F a1 a2 e = e F;

--------------------------------------------------------------------------------
-- injectivity of sums
inj-inl : (A B : Set) -> (a1 a2 : A) ->
          leibniz (A + B) (inl a1) (inl a2) ->
          leibniz A a1 a2;
inj-inl A B a1 a2 eq = \F f1. eq (\s. case s for s. Set with
                                          { inl a. F a
                                          ; inr b. Empty
                                          })
                                 f1;

inj-inr : (A B : Set) -> (b1 b2 : B) ->
          leibniz (A + B) (inr b1) (inr b2) ->
          leibniz B b1 b2;
inj-inr A B b1 b2 eq = \F f1. eq (\s. case s for s. Set with
                                          { inl a. Empty
                                          ; inr b. F b
                                          })
                                 f1;

--------------------------------------------------------------------------------
-- injectivity of pairs
inj-pair1 : (A B : Set) -> (a1 a2 : A) -> (b1 b2 : B) ->
            leibniz (A × B) «a1,b1» «a2,b2» ->
            leibniz A a1 a2;
inj-pair1 A B a1 a2 b1 b2 eq =
  \F f1. eq (\p. F (fst p)) f1;

inj-pair2 : (A B : Set) -> (a1 a2 : A) -> (b1 b2 : B) ->
            leibniz (A × B) «a1,b1» «a2,b2» ->
            leibniz B b1 b2;
inj-pair2 A B a1 a2 b1 b2 eq =
  \F f1. eq (\p. F (snd p)) f1;

--------------------------------------------------------------------------------
-- relation to an inductively defined equality
data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

equal : Nat -> Nat -> Set;
equal n1 = recursionOn n1 with
  `zero. \n2. casesOn n2 with `zero. Unit; `succ _. Empty
  `succ n1. \n2. casesOn n2 with `zero. Empty; `succ n2. recurseOn n1 n2

equal-to-leibniz : (n₁ n₂ : Nat) -> equal n₁ n₂ -> leibniz Nat n₁ n₂;
equal-to-leibniz n1 =
  inductionOn n1 with
    `zero. \n2. casesOn n2 with
      `zero. \eq. reflexivity Nat `zero
      `succ n2. \eq. absurdBy eq
    `succ n1. \n2. casesOn n2 with
      `zero. \eq. absurdBy eq
      `succ n2. \eq. \F f. inductionHypothesisFor n1 n2 eq (\n. F (`succ n)) f

;