-- lexicographic induction principle on pairs of natural numbers
data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

lexicographic :
  (P : Nat -> Nat -> Set 2) ->
  (P `zero `zero) ->
  ((n : Nat) -> P `zero n -> P `zero (`succ n)) ->
  ((n : Nat) -> ((m : Nat) -> P n m) -> P (`succ n) `zero) ->
  ((n : Nat) -> ((m : Nat) -> P n m) -> (m : Nat) -> P (`succ n) m -> P (`succ n) (`succ m)) ->
  (n m : Nat) -> P n m;
lexicographic P p1 p2 p3 p4 n =
  inductionOn n with
    `zero. \m.
      inductionOn m with
        `zero.   p1
        `succ m. p2 m (inductionHypothesisFor m)
    `succ n. \m.
      inductionOn m with
        `zero.   p3 n (inductionHypothesisFor n)
        `succ m. p4 n (inductionHypothesisFor n) m (inductionHypothesisFor m)

-- and in general:

lex :
  (I1 I2 : Set) ->
  (D1 : I1 -> IDesc I1) ->
  (D2 : I2 -> IDesc I2) ->
  (P : (i1 : I1) -> muI I1 D1 i1 -> (i2 : I2) -> muI I2 D2 i2 -> Set 2) ->
  (k : (i1 : I1) -> (i2 : I2) ->
       (x : semI[D1 i1, i1. muI I1 D1 i1]) ->
       (y : semI[D2 i2, i2. muI I2 D2 i2]) ->
       liftI[D1 i1, i1. muI I1 D1 i1, i1 x. (i2 : I2) -> (y : muI I2 D2 i2) -> P i1 x i2 y, x] ->
       liftI[D2 i2, i2. muI I2 D2 i2, i2 y. P i1 (construct x) i2 y, y] ->
       P i1 (construct x) i2 (construct y)) ->
   (i1 : I1) -> (x : muI I1 D1 i1) ->
   (i2 : I2) -> (y : muI I2 D2 i2) ->
   P i1 x i2 y
lex I1 I2 D1 D2 P k i1 x =
  eliminate x then i1 x ih_x.
  \i2 y.
  eliminate y then i2 y ih_y.
  k i1 i2 x y ih_x ih_y

;