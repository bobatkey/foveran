– fin, using explicit equalities

semI : (I : Set) → IDesc I → (I → Set 2) → Set 2;
semI I D X = elimID I (λD. Set 2)
                    (λi. X i)
                    (λA. A)
                    (λD₁ D₂ semD₁ semD₂. semD₁ × semD₂)
                    (λA D semD. (a : A) × semD a)
                    (λA D semD. (a : A) → semD a)
                    D;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
data Nat : Set :=
  | zero :
  | succ : Nat
  ;

natCase : (A : Nat → Set 2) → A zero → ((n : Nat) → A (succ n)) → (n : Nat) → A n;
natCase A a f = induction NatDesc A
                          (λx p. case x for x. A (construct x) with
                                    { inl u. a
                                    ; inr n. f n
                                    });

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
Bool : Set;
Bool = Unit + Unit;

body : Nat → Bool → IDesc Nat;
body n b =
  case b for b. IDesc Nat with
    { inl u. “Σ” Nat (λn'. “K” (succ n' ≡ n))
    ; inr u. “Σ” Nat (λn'. “IId” n' “×” “K” (succ n' ≡ n))
    };

finDesc : Nat → IDesc Nat;
finDesc n = “Σ” Bool (body n);

fin : Nat → Set;
fin = µI Nat finDesc;

fz : (n : Nat) → fin (succ n);
fz n = construct «inl (), «n, refl»»;

fs : (n : Nat) → fin n → fin (succ n);
fs n i = construct «inr (), «n, «i, refl»»»;

finElim :
  (Φ : (n : Nat) → fin n → Set 2) →
  ((n : Nat) → Φ (succ n) (fz n)) →
  ((n : Nat) → (x : fin n) → Φ n x → Φ (succ n) (fs n x)) →
  (n : Nat) → (x : fin n) → Φ n x;
finElim Φ φz φs =
  inductionI Nat finDesc Φ
    (λn x.
      case fst x for b. (z : semI Nat (body n b) (λn. fin n)) →
                        liftI Nat (body n b) (λn. fin n) Φ z →
                        Φ n (construct «b,z») with
        { inl u. λx u.
            elimEq snd x for n' p. Φ n' (construct «inl (), «fst x, p»»)
            with (φz (fst x))
        ; inr u. λx φ.
            elimEq snd (snd x) for n' p. Φ n' (construct «inr (), «fst x, «fst (snd x), p»»»)
            with (φs (fst x) (fst (snd x)) (fst φ))
        } (snd x));

up : (n : Nat) → fin n → fin (succ n);
up =
  finElim (λn i. fin (succ n))
    (λn. fz (succ n))
    (λn i j. fs (succ n) j);

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
succ≢zero : (n : Nat) → succ n ≡ zero → Empty;
succ≢zero n eq =
  elimEq eq for n p. natCase (λn. Set) Empty (λu. Unit) n with ();

emp : fin zero → Empty;
emp i = finElim (λn i. n ≡ zero → Empty)
                succ≢zero
                (λn x φ. succ≢zero n)
                zero
                i
                refl;

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
one : Nat;
one = succ zero;

two : Nat;
two = succ one;

three : Nat;
three = succ two;

i : fin three;
i = fs two (fz one);

normalise i;

normalise up three i;