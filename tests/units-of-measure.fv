– Units of Measure examples

– cross : vec B -> vec B -> real (det B)
– dot   : 

– linear B B'

UOM : Set
UOM = AbGroup[UOM]

Bool : Set
Bool = Unit + Unit

assume num : UOM -> Set

assume zero : (u : UOM) -> num u
assume one  : num unit
assume add  : (u : UOM) -> num u -> num u -> num u
assume sub  : (u : UOM) -> num u -> num u -> num u
assume mul  : (u1 u2 : UOM) -> num u1 -> num u2 -> num (u1 # u2)
assume div  : (u1 u2 : UOM) -> num u1 -> num u2 -> num (u1 # inv u2) + Unit
assume lt   : (u : UOM) -> num u -> num u -> Bool

--------------------------------------------------------------------------------
f : (u1 u2 : UOM) ->
    num u1 ->
    num (u2 # inv u1) ->
    num u2
f u1 u2 x y = mul u1 (u2 # inv u1) x y

--------------------------------------------------------------------------------
– Examples from Andrew's paper
two : num unit
two = add unit one one

diff : (u1 u2 : UOM) ->
       num u1 ->
       (num u1 -> num u2) ->
       num u1 ->
       num (u2 # inv u1) + Unit
diff u1 u2 h f x =
  div u2 u1 (sub u2 (f (add u1 x h)) (f (sub u1 x h))) (mul unit u1 two h)

newton : (u1 u2 : UOM) ->
         (num u1 -> num u2) ->
         (num u1 -> num (u2 # inv u1)) ->
         num u1 ->
         num unit ->
         num u1
newton = ? – difficult to do this without general recursion...

--------------------------------------------------------------------------------
-- Example using dependent types

data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

– list of units? 
– can multiply two lists of things together, keeping track of the 

matrix : UOM -> Nat -> Set
matrix = ? – square matricies of 

– something else?



;