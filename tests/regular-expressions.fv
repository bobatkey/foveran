data Bool : Set where
  `true  : Bool
  `false : Bool

or : Bool -> Bool -> Bool;
or b1 b2 = casesOn b1 with { `true. `true; `false. b2 }

and : Bool -> Bool -> Bool;
and b1 b2 = casesOn b1 with { `true. b2; `false. `false }

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
symbol : Set;
symbol = Unit + Unit;

a : symbol;
a = inl ();

b : symbol;
b = inr ();

symbol-eq : symbol -> symbol -> Bool;
symbol-eq s1 s2 =
  case s1 with
    { inl u. case s2 with { inl u. `true; inr u. `false }
    ; inr u. case s2 with { inl u. `false; inr u. `true }
    };

--------------------------------------------------------------------------------
data regexp : Set where
  `eps  : regexp
  `emp  : regexp
  `alt  : regexp -> regexp -> regexp
  `seq  : regexp -> regexp -> regexp
  `star : regexp -> regexp
  `tok  : symbol -> regexp

acceptsEmpty : regexp -> Bool;
acceptsEmpty r = recursionOn r with {
  `eps. `true;
  `emp. `false;
  `alt r1 r2. or (recurseOn r1) (recurseOn r2);
  `seq r1 r2. and (recurseOn r1) (recurseOn r2);
  `star r. `true;
  `tok s. `false }

step : regexp -> symbol -> regexp;
step r s = recursionOn r with
  { `eps. `emp
  ; `emp. `emp
  ; `alt r1 r2. `alt (recurseOn r1) (recurseOn r2)
  ; `seq r1 r2.
    casesOn acceptsEmpty r1 with
      { `true.  `alt (`seq (recurseOn r1) r2) (recurseOn r2)
      ; `false. `seq (recurseOn r1) r2
      }
  ; `star r. `seq (recurseOn r) (`star r)
  ; `tok s'.
    casesOn symbol-eq s s' with
      { `true. `eps; `false. `emp }
  }

--------------------------------------------------------------------------------
data List (A : Set) : Set where
  `nil  : List A
  `cons : A -> List A -> List A

listInduction : (A : Set) ->
                (P : List A -> Set 2) ->
                (P `nil) ->
                ((a : A) -> (l : List A) -> P l -> P (`cons a l)) ->
                (l : List A) -> P l;
listInduction A P pnil pcons l =
  recursionOn l with
    { `nil. pnil
    ; `cons a l. pcons a l (recurseOn l)
    }

--------------------------------------------------------------------------------
match : List symbol -> regexp -> Bool;
match l = recursionOn l with
  { `nil.      \re. acceptsEmpty re
  ; `cons s l. \re. recurseOn l (step re s)
  }

--------------------------------------------------------------------------------
test : regexp;
test = `seq (`star (`alt (`tok a) (`tok b))) (`tok a); – wouldn't it be great if there was support for infix syntax?

input1 : List symbol;
input1 = `cons a (`cons b (`cons a `nil));

input2 : List symbol;
input2 = `cons a (`cons b `nil);

test1 : match input1 test == `true : Bool;
test1 = refl;

test2 : match input2 test == `false : Bool;
test2 = refl;
