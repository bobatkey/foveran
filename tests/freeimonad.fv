-- Free indexed monads

DescFM : (I : Set) -> (I -> IDesc I) -> (I -> Set) -> (I -> IDesc I)
DescFM I D A = λi. "Sg" (Unit + Unit) (λb. case b with { inl _. "K" (A i); inr _. D i })

FreeMonad : (I : Set) -> (I -> IDesc I) -> (I -> Set) -> (I -> Set)
FreeMonad I D A = µI I (DescFM I D A)

{-
data FreeMonad (I : Set) (D : I -> IDesc I) (A : I -> Set) : I -> Set where
  variable : A i -> FreeMonad I D A i – why not allow for the ‘i’ to be passed in as a parameter?
  term     : semI[D i; i. FreeMonad I D A i] -> FreeMonad I D A i
-}

dropI : (I : Set) ->
        (D : IDesc I) ->
        (A B : I -> Set) ->
        (x : semI[D, i. A i]) ->
        liftI[D, i. A i, i x. B i, x] ->
        semI[D, i. B i]
dropI I D A B =
  elimID I (\D'. (x : semI[D', i. A i]) -> liftI[D', i. A i, i x. B i, x] -> semI[D', i. B i])
         (\i a b. b)
         (\A a _. a)
         (\F G f g «x,y» «p,q». «f x p, g y q»)
         (\A F f «a,x» p. «a,f a x p»)
         (\A F f h p a. f a (h a) (p a))
         D

return : (I : Set) ->
         (D : I -> IDesc I) ->
         (A : I -> Set) ->
         (i : I) ->
         A i -> FreeMonad I D A i
return I D A i a = construct «inl (), a»

bindFM : (I : Set) ->
         (D : I -> IDesc I) ->
         (A B : I -> Set) ->
         ((i : I) -> A i -> FreeMonad I D B i) ->
         (i : I) ->
         FreeMonad I D A i ->
         FreeMonad I D B i
bindFM I D A B f i x =
  eliminate x then i «c,d» r.
  generalise r then
  generalise d then
  case c with
    inl _. \a _. f i a
    inr _. \d r. construct «inr (), dropI I (D i) (muI I (DescFM I D A)) (FreeMonad I D B) d r»

{-

Plan is to build in the return and bind so that the monad laws become
part of the definitional equality. This means we always normalise
everything with respect to the monad laws, for things that look like
free monads, and that use the two built-in combinators.

Other things that should be built-in:
 - monad laws for the descriptions
 - knowledge that semI is a monad morphism (needs semI to be built in)

-}

assume I : Set
assume D : I -> IDesc I
assume A : I -> Set
assume B : I -> Set
assume f : (i : I) -> A i -> FreeMonad I D B i
assume i : I
assume a : A i

normalise bindFM I D A B f i (return I D A i a)

;
