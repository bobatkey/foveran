drop : (D : Desc) →
       (A : Set) →
       (x : sem D (µ D)) →
       lift D (µ D) (λx. A) x →
       sem D A ;
drop D A = elimD (λD'. (x : sem D' (µ D)) → lift D' (µ D) (λx. A) x → sem D' A)
                 (λA x u. x)
                 (λx a. a)
                 (λF G f g x a. «f (fst x) (fst a), g (snd x) (snd a)»)
                 (λF G f g x. case x for x. lift (F “+” G) (µ D) (λx. A) x → sem (F “+” G) A with
                                 { inl y. λa. inl (f y a)
                                 ; inr z. λa. inr (g z a)
                                 })
                 D;

cata : (D : Desc) → (α : Set) → (sem D α → α) → µ D → α ;
cata D α k = induction D (λx. α) (λx a. k (drop D α x a));

