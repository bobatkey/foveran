data Nat : Set :=
  | zero :
  | succ : Nat
  ;

--NatD : Desc ;
--NatD = “K” Unit “+” “Id” ;

--Nat : Set ;
--Nat = µ NatD ;

--zero : Nat ;
--zero = construct NatD (inl ()) ;

--succ : Nat → Nat ;
--succ = \n → construct NatD (inr n) ;

foldNat : (A : Set 1) → A → (A → A) → Nat → A ;
foldNat A a f = induction NatDesc (λx. A)
                          (λx. case x for x. lift NatDesc Nat (λx. A) x → A with
                                  { inl u. λu'. a
				  ; inr x. λa. f a
                                  });

{-
FoldNat : (A : Set 1) → A → (A → A) → Nat → A ;
FoldNat = \A a f → fold NatDesc A (\s → case s for x. A with { inl u → a; inr a → f a }) ;
-}

--primrec : (F : Desc) → (A : Set) → (µ F → sem F A → A) → µ F → A ;
--primrec F A k = induction F (λx → A)
--                          (λx a → k (construct F x) a);

plus : Nat → Nat → Nat ;
plus = foldNat (Nat → Nat) (\x. x) (\f n. succ (f n)) ;

vec : (A : Set) → Nat → Set ;
vec = \A. foldNat Set Unit (\B. A × B) ;

two : Nat ;
two = succ (succ zero) ;

pair : (A : Set) → A → A → vec A two ;
pair = \A a1 a2. «a1, «a2, ()»» ;

conVec : (A : Set) → (n : Nat) → A → vec A n → vec A (succ n) ;
conVec = \A n a v. «a,v» ;

natInduction : (P : Nat → Set 2) →
               (P zero) →
               ((n : Nat) → P n → P (succ n)) →
               (n : Nat) → P n;
natInduction P p0 pS =
  induction NatDesc P
            (\x. case x for x. lift NatDesc Nat P x → P (construct x) with
                    { inl u. \u'. p0
                    ; inr n. \pn. pS n pn
                    });

natPrimrec : (A : Set) → A → (Nat → A → A) → Nat → A ;
natPrimrec A = natInduction (\x. A);


append : (A : Set) → (m n : Nat) → vec A m → vec A n → vec A (plus m n) ;
append A m n = natInduction
                 (\m. vec A m → vec A n → vec A (plus m n))
                 (\xs ys. ys)
                 (\m f xs ys. conVec A (plus m n) (fst xs) (f (snd xs) ys))
                 m;
