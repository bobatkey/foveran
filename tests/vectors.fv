data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

add : Nat -> Nat -> Nat
add n1 n2 =
  eliminate n1 with _ «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \eq _. n2
      ; inr _. \«n,eq» «r,_». `succ r
      }

normalise add (`succ `zero) (`succ `zero)

add-zero : (n : Nat) -> n == add n `zero
add-zero n =
  eliminate n with _ «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \eq     _.     rewriteBy eq then refl
      ; inr _. \«n,eq» «r,_». rewriteBy eq then rewriteBy r then refl
      }

add-succ : (n1 n2 : Nat) -> add n1 (`succ n2) == `succ (add n1 n2) : Nat
add-succ n1 n2 =
  eliminate n1 with _ «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \eq _. rewriteBy eq then refl
      ; inr _. \«n,eq» «r,_». rewriteBy eq then rewriteBy r then refl
      }

symmetry : (n1 n2 : Nat) -> n1 == n2 -> n2 == n1
symmetry n1 n2 eq = rewriteBy eq then refl

add-comm : (n1 n2 : Nat) -> add n1 n2 == add n2 n1
add-comm n1 n2 =
  eliminate n1 with _ «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \eq     _.
        rewriteBy eq then
        rewriteBy add-zero n2 then
        refl
      ; inr _. \«n,eq» «r,_».
        rewriteBy eq then
        rewriteBy symmetry (add n n2) (add n2 n) r then
        rewriteBy add-succ n2 n then
        refl
      }

add-assoc : (n1 n2 n3 : Nat) -> add n1 (add n2 n3) == add (add n1 n2) n3
add-assoc n1 n2 n3 =
  eliminate n1 with _ «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \eq _.         rewriteBy eq then refl
      ; inr _. \«n,eq» «r,_». rewriteBy eq then rewriteBy r then refl
      }

zero_ne_succ : (n : Nat) -> `zero : Nat == `succ n : Nat -> Empty
zero_ne_succ n eq =
  elimEq eq
     for n p.
       eliminate n for _ _. Set
       with _ «c,_» p. case c with { inl _. Unit; inr _. Empty }
    with ()

inj : (n1 n2 : Nat) -> `succ n1 : Nat == `succ n2 : Nat -> n1 == n2
inj n1 n2 eq =
  elimEq eq
     for n p.
       eliminate n for _ _. Set with _ «c, d» _.
         generalise d then
         case c with { inl _. \_. Unit; inr _. \«n,_». n1 == n }
    with refl

nat_eq_dec : (n1 n2 : Nat) -> (n1 == n2) + (n1 == n2 -> Empty)
nat_eq_dec n1 =
  eliminate n1 with _ «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \eq _.
        rewriteBy eq then
        \n2.
        casesOn n2 with
          { `zero.    inl refl
          ; `succ n2. inr (zero_ne_succ n2)
          }
      ; inr _. \«n1,eq» «r,_».
        rewriteBy eq then
        \n2.
        casesOn n2 with
          { `zero.    inr (\eq. zero_ne_succ n1 (rewriteBy eq then refl))
          ; `succ n2. case r n2 with
            { inl eq.  rewriteBy eq then inl refl
            ; inr neq. inr (\eq. neq (inj n1 n2 eq))
            }
          }
      }

--------------------------------------------------------------------------------
data vector (A : Set) : Nat -> Set where
  `nil  : vector A `zero
  `cons : (n : Nat) -> A -> vector A n -> vector A (`succ n)

append : (A : Set) ->
         (n1 n2 : Nat) ->
         vector A n1 ->
         vector A n2 ->
         vector A (add n1 n2)
append A n1 n2 v1 v2 =
  eliminate v1 with n «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \eq         _.     rewriteBy eq then v2
      ; inr _. \«n,a,v,eq» «r,_». rewriteBy eq then `cons (add n n2) a r
      }

reverse : (A : Set) ->
          (n : Nat) ->
          vector A n ->
          vector A n
reverse A n v =
  eliminate v with n «c,d» r.
    generalise r then
    generalise d then
    case c with
      { inl _. \eq         _.
        rewriteBy eq then `nil
      ; inr _. \«n,a,v,eq» «r,_».
        rewriteBy eq then
        rewriteBy symmetry n (add n `zero) (add-zero n) then
        rewriteBy add-succ n `zero then
        append A n (`succ `zero) r (`cons `zero a `nil)
      }

assume B : Set
assume x : B
assume y : B

test : vector B (`succ `zero)
test = `cons `zero x `nil

– normalise append B (`succ `zero) (`succ `zero) test test

--------------------------------------------------------------------------------
elim-veczero : (A : Set) ->
               (P : vector A `zero -> Set) ->
               (P `nil) ->
               (v : vector A `zero) -> P v
elim-veczero A P pnil v =
  (eliminate v for n v. n == `zero : Nat -> (v' : vector A `zero) -> v == v' -> P v'
   with n «c,d» _.
     generalise d then
     case c with
       { inl _.
         \eq.
         rewriteBy eq then
         \eq1.
         rewriteBy eq1 then
         \v' eq2.
         rewriteBy eq2 then
         pnil
       ; inr _.
         \«n,a,v,eq».
         rewriteBy eq then
         \eq1.
         absurdBy (zero_ne_succ n (rewriteBy eq1 then refl))
       }) refl v refl

is-nil : (A : Set) -> (v : vector A `zero) -> v == `nil : vector A `zero
is-nil A v =
  elim-veczero A (\v. v == `nil : vector A `zero) refl v

--------------------------------------------------------------------------------
head : (A : Set) ->
       (n : Nat) ->
       vector A (`succ n) -> A
head A n v =
  (eliminate v
   for n v.
     (n' : Nat) ->
     (v' : vector A (`succ n')) ->
     n == `succ n' : Nat ->
     v == v' ->
     A
   with n «c,d» _.
     generalise d then
     case c with
       { inl _.
         \eq.
         rewriteBy eq then
         \n' v' eq _.
         absurdBy (zero_ne_succ n' eq)
       ; inr _.
         \«n,a,v,eq».
         rewriteBy eq then
         \n' v' _ _.
         a
       }) n v refl refl

elim-vecsucc : (A : Set) ->
               (P : (n : Nat) -> vector A (`succ n) -> Set) ->
               ((n : Nat) -> (a : A) -> (xs : vector A n) -> P n (`cons n a xs)) ->
               (n : Nat) -> (xs : vector A (`succ n)) -> P n xs
elim-vecsucc A P pcons n v =
  (eliminate v for n v. (n' : Nat) -> n == `succ n' : Nat -> (v' : vector A (`succ n')) -> v == v' -> P n' v'
   with n «c,d» _.
     generalise d then
     case c with
       { inl _.
         \eq.
         rewriteBy eq then
         \n' eq.
         absurdBy (zero_ne_succ n' eq)
       ; inr _.
         \«n,a,v,eq».
         rewriteBy eq then
         \n' eq1.
         rewriteBy inj n n' eq1 then
         \v' eq2.
         rewriteBy eq2 then
         pcons n a v
       }) n refl v refl

head2 : (A : Set) ->
        (n : Nat) ->
        vector A (`succ n) -> A
head2 A n v = elim-vecsucc A (\n v. A) (\n a xs. a) n v

--------------------------------------------------------------------------------
-- Brady-style vectors

vector2:code : Set -> Nat -> IDesc Nat
vector2:code A n =
  casesOn n with
    { `zero.   "K" Unit
    ; `succ n. "Sg" A (\_. "IId" n)
    }

vector2 : Set -> Nat -> Set
vector2 A = muI Nat (vector2:code A)

vnil : (A : Set) -> vector2 A `zero
vnil A = construct ()

vcons : (A : Set) -> (n : Nat) -> A -> vector2 A n -> vector2 A (`succ n)
vcons A n a xs = construct «a,xs»

vector2:elim :
  (A : Set) ->
  (P : (n : Nat) -> vector2 A n -> Set 2) ->
  (P `zero (vnil A)) ->
  ((n : Nat) -> (a : A) -> (v : vector2 A n) -> P n v -> P (`succ n) (vcons A n a v)) ->
  (n : Nat) -> (v : vector2 A n) -> P n v
vector2:elim A P pnil pcons n v =
  eliminate v with n d r.
    generalise r then
    generalise d then
    casesOn n with
      { `zero.   \_     _. pnil
      ; `succ n. \«a,v» r. pcons n a v r
      }

vecappend : (A : Set) -> (n1 n2 : Nat) -> vector2 A n1 -> vector2 A n2 -> vector2 A (add n1 n2)
vecappend A n1 n2 v1 v2 =
  vector2:elim A (\n v. vector2 A (add n n2))
    v2
    (\n a v v'. vcons A (add n n2) a v')
    n1 v1

;
