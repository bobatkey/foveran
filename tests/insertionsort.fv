-- Insertion sort, based on Conor's Pig09/test/Sort.pig
-- and an Epilogue blog post:
--   http://www.e-pig.org/epilogue/?p=690

-- FIXME: would be great to get the OList definition working with
-- better syntax. And some kind of proof search thing too.

data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

Le : Nat -> Nat -> Set
Le n1 = recursionOn n1 with
  `zero. \n2. Unit
  `succ n1. \n2. casesOn n2 with
    `zero.    Empty
    `succ n2. recurseOn n1 n2

dec_Le : (n1 n2 : Nat) -> Le n1 n2 + Le n2 n1
dec_Le n1 = recursionOn n1 with
  `zero. \n2. inl ()
  `succ n1. \n2. casesOn n2 with
    `zero. inr ()
    `succ n2. recurseOn n1 n2

data BT (X : Set) : Set where
  `top : BT X
  `el  : X -> BT X
  `bot : BT X

BTLe : (X : Set) -> (LE : X -> X -> Set) -> (x y : BT X) -> Set
BTLe X LE x y = casesOn x with
  `top.  casesOn y with `top. Unit; `el _. Empty;  `bot. Empty
  `el x. casesOn y with `top. Unit; `el y. LE x y; `bot. Empty
  `bot.  Unit

Bounds : Set
Bounds = BT Nat × BT Nat

Between : (x : Nat) -> (lu : Bounds) -> Set
Between x «l,u» = BTLe Nat Le l (`el x) × BTLe Nat Le (`el x) u

OList:Desc : Bounds -> IDesc Bounds
OList:Desc «l,u» =
  "Sg" (Unit + Unit)
    (\c. case c with { inl _. "K" (BTLe Nat Le l u)
                     ; inr _. "Sg" Nat (\n. "IId" «`el n,u» “×” "K" (BTLe Nat Le l (`el n))) })

{-
- explicit mentioning of the index variable. Doesn't generate equalities...

data[noeq] OList : Bounds -> Set where
  lu.
  `nil  : BTLe Nat l u -> OList lu
  `cons : (n : Nat) -> OList «`el n,u» -> BTLe Nat Le l (`el n) -> OList lu

-}

OList : Bounds -> Set
OList lu = muI Bounds OList:Desc lu

insert : (lu : Bounds) -> (n : Nat) -> OList lu -> Between n lu -> OList lu
insert lu n olist =
  eliminate olist for lu _. Between n lu -> OList lu then lu «c,d» r.
  \«b1,b2».
  generalise r then
  generalise d then
  case c with
    inl _. \b _. construct «inr (), n, construct «inl (), b2», b1»
    inr _. \«n',l,b» «r,_». case dec_Le n n' with
      inl n_le_n'. construct «inr (), n, construct «inr (), n', l, n_le_n'», b1»
      inr n'_le_n. construct «inr (), n', r «n'_le_n, b2», b»

data List (A : Set) : Set where
  `nil  : List A
  `cons : A -> List A -> List A

insertionsort : List Nat -> OList «`bot, `top»
insertionsort l = recursionOn l with
  `nil.      construct «inl (), ()»
  `cons n l. insert «`bot,`top» n (recurseOn l) «(),()»

{-
normalise insertionsort (`cons (`succ `zero)
                         (`cons `zero
                          (`cons (`succ (`succ (`succ `zero)))
                           (`cons (`succ (`succ `zero))
                            `nil))))
-}
;
