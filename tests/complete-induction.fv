data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

lt : Nat -> Nat -> Set
lt n1 = recursionOn n1 with
  `zero.    \n2. casesOn n2 with `zero. Empty; `succ n2. Unit
  `succ n1. \n2. casesOn n2 with `zero. Empty; `succ n2. recurseOn n1 n2

ltZero : (n : Nat) -> lt n `zero -> Empty
ltZero n = casesOn n with
  `zero.   \lt. lt
  `succ n. \lt. lt

ltSucc : (n : Nat) -> lt n (`succ n)
ltSucc n = inductionOn n with
  `zero. ()
  `succ n. inductionHypothesisFor n

lt_le_trans : (a b c : Nat) -> lt a b -> lt b (`succ c) -> lt a c
lt_le_trans a = inductionOn a with
  `zero. \b c. casesOn b with
    `zero. \lt_zero_zero _. absurdBy lt_zero_zero
    `succ b. \lt_zero_Sb. casesOn c with
      `zero. \lt_b_zero. absurdBy (ltZero b lt_b_zero)
      `succ c. \_. ()
  `succ a. \b c. casesOn b with
    `zero. \lt_a_zero _. absurdBy lt_a_zero
    `succ b. \lt_a_b. casesOn c with
      `zero. \lt_b_zero. absurdBy (ltZero b lt_b_zero)
      `succ c. inductionHypothesisFor a b c lt_a_b

complete-nat-induction-helper :
  (P : Nat -> Set 2) ->
  ((n : Nat) -> ((m : Nat) -> lt m n -> P m) -> P n) ->
  (n : Nat) ->
  (m : Nat) ->
  lt m n ->
  P m
complete-nat-induction-helper P k n = inductionOn n with
  `zero.   \m p. absurdBy ltZero m p
  `succ n. \m p. k m (\o p'. recurseOn n o (lt_le_trans o m n p' p))

complete-nat-induction :
  (P : Nat -> Set 2) ->
  ((n : Nat) -> ((m : Nat) -> lt m n -> P m) -> P n) ->
  (n : Nat) -> P n
complete-nat-induction P k n =
  complete-nat-induction-helper P k (`succ n) n (ltSucc n)

--------------------------------------------------------------------------------
-- Datatype generic complete-induction, using a "memoisation table" approach

all :
  (I : Set) ->
  (D : IDesc I) ->
  (X : I -> Set) ->
  (P : (i : I) -> X i -> Set 2) ->
  (p : (i : I) -> (x : X i) -> P i x) ->
  (xs : semI[D, i. X i]) ->
  liftI[D, i. X i, i x. P i x, xs]
all I D X P p =
  elimID I (\D. (xs : semI[D, i. X i]) -> liftI[D, i. X i, i x. P i x, xs])
    (\i x. p i x)
    (\A a. ())
    (\D1 D2 rD1 rD2 «xs1,xs2». «rD1 xs1, rD2 xs2»)
    (\A D rD «a,xs». rD a xs)
    (\A D rD f a. rD a (f a))
    D

swizzle :
  (I : Set) ->
  (D : IDesc I) ->
  (X : I -> Set) ->
  (x : semI[D, i. X i]) ->
  (p : liftI[D, i. X i, i x. Set, x]) ->
  Set
swizzle I D X =
  elimID I (\D. (x : semI[D, i. X i]) -> (p : liftI[D, i. X i, i x. Set, x]) -> Set)
    (\i x S. S)
    (\A x u. Unit)
    (\D1 D2 rD1 rD2 «x1,x2» «p1,p2». rD1 x1 p1 × rD2 x2 p2)
    (\A D rD «a,xs» p. rD a xs p)
    (\A D rD f p. (a : A) -> rD a (f a) (p a))
    D

-- this is one way of defining the carrier for complete induction. The
-- other way would be to define an inductive family that describes the
-- same data.
ciRec :
  (I : Set) ->
  (D : I -> IDesc I) ->
  (P : (i : I) -> muI I D i -> Set) ->
  (i : I) ->
  muI I D i ->
  Set
ciRec I D P i x =
  eliminate x then i x r.
  P i (construct x) × swizzle I (D i) (muI I D) x r

step :
  (I : Set) ->
  (D : I -> IDesc I) ->
  (P : (i : I) -> muI I D i -> Set) ->
  (i : I) ->
  (x : semI[D i, i. muI I D i]) ->
  liftI[D i, i. muI I D i, i x. ciRec I D P i x, x] ->
  swizzle I (D i) (muI I D) x (all I (D i) (muI I D) (\_ _. Set) (ciRec I D P) x)
step I D P i =
  elimID I
    (\D'.
      (x : semI[D', i. muI I D i]) ->
      liftI[D', i. muI I D i, i x. ciRec I D P i x, x] ->
      swizzle I D' (muI I D) x (all I D' (muI I D) (\_ _. Set) (ciRec I D P) x))
    (\i x p. p)
    (\A x _. ())
    (\D1 D2 rD1 rD2 «x1,x2» «p1,p2». «rD1 x1 p1,rD2 x2 p2»)
    (\A D rD «a,x» p. rD a x p)
    (\A D rD f p a. rD a (f a) (p a))
    (D i)

-- FIXME: prove that this is the inverse to ‘step’.
unstep :
  (I : Set) ->
  (D : I -> IDesc I) ->
  (P : (i : I) -> muI I D i -> Set) ->
  (i : I) ->
  (x : semI[D i, i. muI I D i]) ->
  swizzle I (D i) (muI I D) x (all I (D i) (muI I D) (\_ _. Set) (ciRec I D P) x) ->
  liftI[D i, i. muI I D i, i x. ciRec I D P i x, x]
unstep I D P i =
  elimID I
    (\D'.
      (x : semI[D', i. muI I D i]) ->
      swizzle I D' (muI I D) x (all I D' (muI I D) (\_ _. Set) (ciRec I D P) x) ->
      liftI[D', i. muI I D i, i x. ciRec I D P i x, x])
    (\i x p. p)
    (\A x _. ())
    (\D1 D2 rD1 rD2 «x1,x2» «p1,p2». «rD1 x1 p1,rD2 x2 p2»)
    (\A D rD «a,x» p. rD a x p)
    (\A D rD f p a. rD a (f a) (p a))
    (D i)

project1 : (I : Set) ->
  (D : I -> IDesc I) ->
  (P : (i : I) -> muI I D i -> Set) ->
  (i : I) ->
  (x : muI I D i) -> ciRec I D P i x -> P i x
project1 I D P i x =
  eliminate x then _ _ _. \«p,_». p

project2 : (I : Set) ->
  (D : I -> IDesc I) ->
  (P : (i : I) -> muI I D i -> Set) ->
  (i : I) ->
  (x : muI I D i) ->
  ciRec I D P i x ->
  liftI[D i, i. muI I D i, i x. ciRec I D P i x, eliminate x then _ x _. x]
project2 I D P i x =
  eliminate x then i x _. \«_,p». unstep I D P i x p

completeInduction :
  (I : Set) ->
  (D : I -> IDesc I) ->
  (P : (i : I) -> muI I D i -> Set) ->
  (k : (i : I) -> (x : semI[D i, i. muI I D i]) -> liftI[D i, i. muI I D i, i x. ciRec I D P i x, x] -> P i (construct x)) ->
  (i : I) ->
  (x : muI I D i) ->
  P i x
completeInduction I D P k i x =
  project1 I D P i x (eliminate x then i x p. «k i x p, step I D P i x p»)

--------------------------------------------------------------------------------
-- fibonacci function, as an example of complete induction
add : Nat -> Nat -> Nat
add n1 n2 = recursionOn n1 with `zero. n2; `succ n1. `succ (recurseOn n1)

mul : Nat -> Nat -> Nat
mul n1 n2 = recursionOn n1 with `zero. `zero; `succ n1. add n2 (recurseOn n1)

fibonacci : Nat -> Nat
fibonacci = completeInduction Unit Nat:code (\_ _. Nat)
  (\_ «c,d».
    generalise d then
    case c with
      inl _. \eq _. `succ `zero
      inr _. \«n,eq». casesOn n with
        `zero. \_. `succ `zero
        `succ n2. \««r_n1, p», _».
          generalise p then
          casesOn n2 with
            `zero. \««r_n2,_»,_».    add r_n1 r_n2
            `succ _. \««r_n2,_», _». add r_n1 r_n2
  )
  ()

-- version using the projection functions...
{- Old comment:
-- this seems unneccesarily difficult. I think this is because the next
-- step of the recursion is hidden in the definition of ciRec, and needs
-- a case analysis to extract it. If the complete induction principle was
-- defined as having lift F (µ F) (λx. P x × ciRec F P x) as the
-- induction hypothesis, then it might be easier
-}
fibonacci2 : Nat -> Nat
fibonacci2 = completeInduction Unit Nat:code (\_ _. Nat)
  (\_ «c,d».
    generalise d then
        case c with
      inl _. \eq _. `succ `zero
      inr _. \«n,eq». \«p,_».
        generalise project2 Unit Nat:code (\_ _. Nat) () n p then
        casesOn n with
        `zero. \_. `succ `zero
        `succ n2. \«p',_». add (project1 Unit Nat:code (\_ _. Nat) () n p) (project1 Unit Nat:code (\_ _. Nat) () n2 p')
  )
  ()


two : Nat
two = `succ (`succ `zero)

four : Nat;
four = mul two two;

five : Nat;
five = `succ four;

eight : Nat;
eight = mul four two;

test : fibonacci five == eight
test = refl

test2 : fibonacci2 five == eight
test2 = refl

;