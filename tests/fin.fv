data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

succ_ne_zero : (n : Nat) -> `succ n : Nat == `zero : Nat -> Empty
succ_ne_zero n eq =
  elimEq eq
     for n p.
       eliminate n for _ _. Set
       then _ «c,_» p. case c with { inl _. Empty; inr _. Unit }
    then ()

ne2 : (n : Nat) -> `succ (`succ n) : Nat == `succ `zero : Nat -> Empty
ne2 n eq =
  elimEq eq
     for n p.
       eliminate n for _ _. Set then _ «c,d» _.
         generalise d then
         case c with
           { inl _. \_. Empty
           ; inr _. \«n,_».
             eliminate n then _ «c,d» _.
               case c with { inl _. Empty; inr _. Unit }
           }
    then ()

inj : (n1 n2 : Nat) -> `succ n1 : Nat == `succ n2 : Nat -> n1 == n2
inj n1 n2 eq =
  elimEq eq
     for n p.
       eliminate n for _ _. Set then _ «c, d» _.
         generalise d then
         case c with { inl _. \_. Unit; inr _. \«n,_». n1 == n }
    then refl

inj-construct : (I : Set) ->
                (D : I -> IDesc I) ->
                (i : I) ->
                (x y : semI[D i, i. µI I D i]) ->
                construct x : µI I D i == construct y : µI I D i ->
                x == y
inj-construct I D i x y eq =
  elimEq eq
     for z p. eliminate z for _ _. Set then _ y _. x == y
    then refl

inj-sigma1 : (A : Set) ->
             (B : A -> Set) ->
             (x1 x2 : A) ->
             (y1 : B x1) ->
             (y2 : B x2) ->
             «x1,y1» : ((x : A) × B x) == «x2,y2» : ((x : A) × B x) ->
             x1 == x2
inj-sigma1 A B x1 x2 y1 y2 eq =
  elimEq eq for x p. x1 == fst x then refl

inj-sigma2 : (A : Set) ->
             (B : A -> Set) ->
             (x1 x2 : A) ->
             (y1 : B x1) ->
             (y2 : B x2) ->
             «x1,y1» : ((x : A) × B x) == «x2,y2» : ((x : A) × B x) ->
             y1 == y2
inj-sigma2 A B x1 x2 y1 y2 eq =
  elimEq eq for x p. y1 == snd x then refl

--------------------------------------------------------------------------------
Bool : Set;
Bool = Unit + Unit;

finDesc : Nat -> IDesc Nat;
finDesc n = casesOn n with
  `zero.   "K" Empty
  `succ n. "Sg" Bool (\b. case b with { inl _. "K" Unit; inr _. "IId" n })

fin : Nat -> Set;
fin = µI Nat finDesc;

fz : (n : Nat) -> fin (`succ n);
fz n = construct «inl (), ()»;

fs : (n : Nat) -> fin n -> fin (`succ n);
fs n i = construct «inr (), i»;

finElim :
  (P : (n : Nat) -> fin n -> Set 2) ->
  ((n : Nat) -> P (`succ n) (fz n)) ->
  ((n : Nat) -> (x : fin n) -> P n x -> P (`succ n) (fs n x)) ->
  (n : Nat) -> (x : fin n) -> P n x;
finElim P pz ps n x =
  eliminate x then n d p.
    generalise p then
    generalise d then
    casesOn n with
      `zero.   \x. absurdBy x
      `succ n. \«c,d».
        generalise d then
        case c with
          inl _. \_ _. pz n
          inr _. \x px. ps n x px

--------------------------------------------------------------------------------
data fin2 : Nat -> Set where
  `fz2 : (n : Nat) -> fin2 (`succ n)
  `fs2 : (n : Nat) -> fin2 n -> fin2 (`succ n)

fin2Elim :
  (P : (n : Nat) -> fin2 n -> Set 2) ->
  ((n : Nat) -> P (`succ n) (`fz2 n)) ->
  ((n : Nat) -> (x : fin2 n) -> P n x -> P (`succ n) (`fs2 n x)) ->
  (n : Nat) -> (x : fin2 n) -> P n x;
fin2Elim P pz ps n x =
  recursionOn x with
    `fz2 n.   pz n
    `fs2 n f. ps n f (recurseOn f)

elim-finzero :
  (P : fin2 `zero -> Set) ->
  (i : fin2 `zero) ->
  P i
elim-finzero P i =
  (eliminate i for n i. (i' : fin2 `zero) -> n == `zero : Nat -> i == i' -> P i'
   then n «c,d» p.
     generalise p then
     generalise d then
     case c with
       { inl _.
         \«n, eq1».
         rewriteBy eq1 then
         \_ _ eq2 _.
         absurdBy (succ_ne_zero n eq2)
       ; inr _.
         \«n, _, eq1».
         rewriteBy eq1 then
         \_ _ eq2 _.
         absurdBy (succ_ne_zero n eq2)
       }) i refl refl

--------------------------------------------------------------------------------
up : (n : Nat) ->
     fin2 n ->
     fin2 (`succ n)
up n f = recursionOn f with
  `fz2 n.   `fz2 (`succ n)
  `fs2 n f. `fs2 (`succ n) (recurseOn f)

--------------------------------------------------------------------------------
one : Nat;
one = `succ `zero;

two : Nat;
two = `succ one;

three : Nat;
three = `succ two;

i : fin2 three;
i = `fs2 two (`fz2 one);

normalise i;

normalise up three i;

;
