data Nat : Set :=
  | zero :
  | succ : Nat
  ;

natInduction : (Φ : Nat → Set 2) →
               (Φ zero) →
               ((n : Nat) → Φ n → Φ (succ n)) →
               (n : Nat) → Φ n;
natInduction Φ φ0 φS =
  induction NatDesc Φ
            (\x. case x for x. lift NatDesc Nat Φ x → Φ (construct x) with
                    { inl u. \u'. φ0
                    ; inr n. \φn. φS n φn
                    });

natCase : (A : Nat → Set 2) → A zero → ((n : Nat) → A (succ n)) → (n : Nat) → A n;
natCase A a f = induction NatDesc A
                          (λx p. case x for x. A (construct x) with
                                    { inl u. a
                                    ; inr n. f n
                                    });

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
Bool : Set;
Bool = Unit + Unit;

finDesc : Nat → IDesc Nat;
finDesc =
  natCase (λn. IDesc Nat)
   (“K” Empty)
   (λn. “Σ” Bool (λb. case b with { inl u. “K” Unit; inr u. “IId” n }));

fin : Nat → Set;
fin = µI Nat finDesc;

fz : (n : Nat) → fin (succ n);
fz n = construct «inl (), ()»;

fs : (n : Nat) → fin n → fin (succ n);
fs n i = construct «inr (), i»;

finElim :
  (Φ : (n : Nat) → fin n → Set 2) →
  ((n : Nat) → Φ (succ n) (fz n)) →
  ((n : Nat) → (x : fin n) → Φ n x → Φ (succ n) (fs n x)) →
  (n : Nat) → (x : fin n) → Φ n x;
finElim Φ φz φs =
  inductionI Nat finDesc Φ
    (natCase (λn. (x : semI[finDesc n, n. fin n]) → liftI Nat (finDesc n) (λn. fin n) Φ x → Φ n (construct x))
      (λx φ. elimEmpty x)
      (λn x. case fst x
                for y. (z : semI[case y for y. IDesc Nat with { inl u. “K” Unit; inr u. “IId” n }, n. fin n]) →
                       liftI Nat (case y for y. IDesc Nat with { inl u. “K” Unit; inr u. “IId” n }) (λn. fin n) Φ z →
                       Φ (succ n) (construct «y,z»)
                with { inl u. λu u. φz n
                     ; inr u. λz p. φs n z p
                     }
               (snd x)));

