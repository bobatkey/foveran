data acc (A : Set) (lt : A -> A -> Set) : A -> Set where
  `step : (a : A) -> ((a' : A) -> lt a' a -> acc A lt a') -> acc A lt a

wf : (A : Set) -> (A -> A -> Set) -> Set
wf A r = (a : A) -> acc A r a

--------------------------------------------------------------------------------
data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

symmetry : (n1 n2 : Nat) -> n1 == n2 -> n2 == n1
symmetry n1 n2 eq = rewriteBy eq then refl

lt : Nat -> Nat -> Set
lt n1 n2 =
  casesOn n2 with
    `zero.   Empty
    `succ n. n1 == n

nat_lt_wf : wf Nat lt
nat_lt_wf n = recursionOn n with
  `zero.   `step `zero (\n' e. absurdBy e)
  `succ n. `step (`succ n) (\n' e. rewriteBy symmetry n' n e then recurseOn n)

â€“ how to do proper lessthan relation?

;
