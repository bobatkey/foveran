--assume induction : (D : Desc) →
--                   (P : µ D → Set 2) →
--                   (k : (x : sem D (µ D)) → lift D (µ D) P x → P (construct D x)) →
--                   (x : µ D) →
--                   P x;

-- doesn't seem to work in the product case. Need to think about this harder.
{-
relate : (D : Desc) →
         (A : Set) →
         (k : sem D A → A → Set) →
         µ D → A → Set ;
relate D A k =
  induction D
    (λx → A → Set)
    (elimD (λD' → (sem D' A → A → Set) → (x : sem D' (µ D)) → lift D' (µ D) (λx → A → Set) x → A → Set)
           (λA' k a' u a → k a' a) 
           (λk x p a → (a' : A) × p a' × k a' a)
           (λF G f g k x p a → Unit)
           (λF G f g k x p a → Unit)
           D
           k);
-}

-- problem: we can't apply F to (A → Set) because it is too big (F :
-- Set → Set, not Set1 → Set1)

-- But if we apply it to A → U, say and look for an algebra F(A → U) →
-- A → U, then we might get a distributive law d : F(A → U) → FA → U,
-- then we need to do do something like
--    \x a → (y : FA) × d x y × rho y a
-- which doesn't work 