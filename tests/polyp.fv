data Code : Set where
  param : Code
  rec   : Code
  pair  : Code -> Code -> Code
  sum   : Code -> Code -> Code
  u     : Code

– These should all be generated automatically
param : Code
param = construct «inl (), refl»

rec : Code
rec = construct «inr (inl ()), refl»

pair : Code -> Code -> Code
pair c₁ c₂ = construct «inr (inr (inl ())), c₁, c₂, refl»

sum : Code -> Code -> Code
sum c₁ c₂ = construct «inr (inr (inr (inl ()))), c₁, c₂, refl»

u : Code
u = construct «inr (inr (inr (inr ()))), refl»

--------------------------------------------------------------------------------
-- an eliminator for Codes
-- this should be generated automatically
elimCode : (P : Code -> Set 2) ->
           P param ->
           P rec ->
           ((c₁ c₂ : Code) -> P c₁ -> P c₂ -> P (pair c₁ c₂)) ->
           ((c₁ c₂ : Code) -> P c₁ -> P c₂ -> P (sum c₁ c₂)) ->
           P u ->
           (c : Code) -> P c
elimCode P Pparam Prec Ppair Psum Punit c =
  eliminate c with _ «c,d» p.
    generalise p then
    generalise d then
    case c with
      { inl _. \eq _. rewriteBy eq then Pparam
      ; inr c.
        case c with
          { inl _. \eq _. rewriteBy eq then Prec
          ; inr c.
            case c with
              { inl _. \«c1, c2, eq» «d1, d2, _». rewriteBy eq then Ppair c1 c2 d1 d2
              ; inr c.
                case c with
                  { inl _. \«c1, c2, eq» «d1, d2, _». rewriteBy eq then Psum c1 c2 d1 d2
                  ; inr c. \eq _. rewriteBy eq then Punit
                  }
              }
          }
      }

toDesc : Code -> Set -> Unit -> IDesc Unit
toDesc C A _ =
  elimCode (λ_. IDesc Unit)
    (“K” A)
    (“IId” ())
    (λC₁ C₂ D₁ D₂. D₁ “×” D₂)
    (λC₁ c₂ D₁ D₂. “Σ” (Unit + Unit) (λc. case c for c. IDesc Unit with { inl _. D₁; inr _. D₂ }))
    (“K” Unit)
    C

{-
-- What I want to be able to write:
toDesc2 : Code -> Set -> Unit -> IDesc Unit
toDesc2 C A _ =
  eliminate C with
    param.      “K” A
    rec.        “IId” ()
    pair C₁ C₂. recurse C₁ “×” recurse C₂
    sum C₁ C₂.  “Σ” (Unit + Unit) (λc. case c with { inl _. recurse C₁; inr _. recurse C₂ })
    unit.       “K” ()
-}

reify : (C : Code) ->
        (A : Set) ->
        Set
reify C A = µI Unit (toDesc C A) ()

mapC : (C : Code) ->
       (A B : Set) ->
       (f : A -> B) ->
       (X : Unit -> Set 2) ->
       semI[toDesc C A (), u. X u] ->
       semI[toDesc C B (), u. X u]
mapC C A B f X =
  elimCode (λC. semI[toDesc C A (), u. X u] -> semI[toDesc C B (), u. X u])
    f
    (λx. x)
    (λC1 C2 f1 f2 «a1,a2». «f1 a1, f2 a2»)
    (λC1 C2 f1 f2 «c,a».
      generalise a then
      case c with
        { inl _. λa. «inl (), f1 a»
        ; inr _. λa. «inr (), f2 a»
        })
    (λx. x)
    C

drop : (I : Set) ->
       (D : I -> IDesc I) ->
       (A : I -> Set) ->
       (i : I) ->
       (x : semI[D i, i. µI I D i]) ->
       liftI[D i, i. µI I D i, i x. A i, x] ->
       semI[D i, i. A i]
drop I D A i =
  elimID I
    (λD'. (x : semI[D', i. µI I D i]) ->
          liftI[D', i. µI I D i, i x. A i, x] ->
          semI[D', i. A i])
    (λi x a. a)
    (λX x u. x)
    (λD₁ D₂ drop₁ drop₂ x a.
      «drop₁ (fst x) (fst a), drop₂ (snd x) (snd a)»)
    (λX D drop x a. «fst x, drop (fst x) (snd x) a»)
    (λX D drop f a. λx. drop x (f x) (a x))
    (D i)

-- Set-level catamorphisms
icata : (I : Set) ->
        (D : I -> IDesc I) ->
        (A : I -> Set) ->
        ((i : I) -> semI[D i, i. A i] -> A i) ->
        (i : I) -> µI I D i -> A i
icata I D A k i x =
  eliminate x with i x p. k i (drop I D A i x p)

– generic map for all codes
map : (C : Code) ->
      (A B : Set) ->
      (f : A -> B) ->
      reify C A -> reify C B
map C A B f =
  icata Unit (toDesc C A) (λ_. reify C B)
    (λ_ x. construct (mapC C A B f (λ_. reify C B) x))
    ()

--------------------------------------------------------------------------------
– A example with lists
listcode : Code
listcode = sum u (pair param rec)

list : Set -> Set
list A = reify listcode A

nil : (A : Set) -> list A
nil A = construct «inl (), ()»

cons : (A : Set) -> A -> list A -> list A
cons A a l = construct «inr (), a, l»

– let's make a list and apply map to it...
assume A : Set
assume a : A
assume b : A
assume B : Set
assume f : A -> B

l : list A
l = cons A a (cons A b (nil A))

normalise map listcode A B f l

;