data Code : Set where
  `param : Code
  `rec   : Code
  `pair  : Code -> Code -> Code
  `sum   : Code -> Code -> Code
  `u     : Code

--------------------------------------------------------------------------------
-- an eliminator for Codes
-- this should be generated automatically
elimCode : (P : Code -> Set 2) ->
           P `param ->
           P `rec ->
           ((c1 c2 : Code) -> P c1 -> P c2 -> P (`pair c1 c2)) ->
           ((c1 c2 : Code) -> P c1 -> P c2 -> P (`sum c1 c2)) ->
           P `u ->
           (c : Code) -> P c
elimCode P Pparam Prec Ppair Psum Punit c = recursionOn c with
  { `param.      Pparam
  ; `rec.        Prec
  ; `pair c1 c2. Ppair c1 c2 (recurseOn c1) (recurseOn c2)
  ; `sum  c1 c2. Psum c1 c2 (recurseOn c1) (recurseOn c2)
  ; `u.          Punit
  }

toDesc : Code -> Set -> Unit -> IDesc Unit
toDesc C A _ = recursionOn C with
  { `param. "K" A
  ; `rec.   "IId" ()
  ; `pair c1 c2. recurseOn c1 “×” recurseOn c2
  ; `sum  c1 c2. "Sg" (Unit + Unit) (\c. case c with { inl _. recurseOn c1; inr _. recurseOn c2 })
  ; `u.     "K" Unit
  }

reify : (C : Code) ->
        (A : Set) ->
        Set
reify C A = µI Unit (toDesc C A) ()

mapC : (C : Code) ->
       (A B : Set) ->
       (f : A -> B) ->
       (X : Unit -> Set 2) ->
       semI[toDesc C A (), u. X u] ->
       semI[toDesc C B (), u. X u]
mapC C A B f X = recursionOn C with
  { `param. f
  ; `rec.   \x. x
  ; `pair c1 c2. \«a1,a2». «recurseOn c1 a1, recurseOn c2 a2»
  ; `sum  c1 c2. \«c,a».
    generalise a then
    case c with
      { inl _. \a. «inl (), recurseOn c1 a»
      ; inr _. \a. «inr (), recurseOn c2 a»
      }
  ; `u.     \x. x
  }

drop : (I : Set) ->
       (D : I -> IDesc I) ->
       (A : I -> Set) ->
       (i : I) ->
       (x : semI[D i, i. µI I D i]) ->
       liftI[D i, i. µI I D i, i x. A i, x] ->
       semI[D i, i. A i]
drop I D A i =
  elimID I
    (λD'. (x : semI[D', i. µI I D i]) ->
          liftI[D', i. µI I D i, i x. A i, x] ->
          semI[D', i. A i])
    (λi x a. a)
    (λX x u. x)
    (λD1 D2 drop1 drop2 x a.
      «drop1 (fst x) (fst a), drop2 (snd x) (snd a)»)
    (λX D drop x a. «fst x, drop (fst x) (snd x) a»)
    (λX D drop f a. λx. drop x (f x) (a x))
    (D i)

-- Set-level catamorphisms
icata : (I : Set) ->
        (D : I -> IDesc I) ->
        (A : I -> Set) ->
        ((i : I) -> semI[D i, i. A i] -> A i) ->
        (i : I) -> µI I D i -> A i
icata I D A k i x =
  eliminate x then i x p. k i (drop I D A i x p)

– generic map for all codes
map : (C : Code) ->
      (A B : Set) ->
      (f : A -> B) ->
      reify C A -> reify C B
map C A B f =
  icata Unit (toDesc C A) (λ_. reify C B)
    (λ_ x. construct (mapC C A B f (λ_. reify C B) x))
    ()

--------------------------------------------------------------------------------
– A example with lists
listcode : Code
listcode = `sum `u (`pair `param `rec)

list : Set -> Set
list A = reify listcode A

nil : (A : Set) -> list A
nil A = construct «inl (), ()»

cons : (A : Set) -> A -> list A -> list A
cons A a l = construct «inr (), a, l»

– let's make a list and apply map to it...
assume A : Set
assume a : A
assume b : A
assume B : Set
assume f : A -> B

l : list A
l = cons A a (cons A b (nil A))

normalise map listcode A B f l

;