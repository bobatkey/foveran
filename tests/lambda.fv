data Nat : Set where
  `zero : Nat
  `succ : Nat -> Nat

lt : Nat -> Nat -> Set;
lt n1 = recursionOn n1 with
  `zero.    \n2. casesOn n2 with `zero. Empty; `succ n2. Unit
  `succ n1. \n2. casesOn n2 with `zero. Empty; `succ n2. recurseOn n1 n2

data Term : Set where
  `var  : Nat -> Term
  `app  : Term -> Term -> Term
  `lam  : Term -> Term

goodTerm : Term -> Nat -> Set ;
goodTerm t = recursionOn t with
  `var k. \n. lt k n
  `app t1 t2. \n. recurseOn t1 n × recurseOn t2 n
  `lam t. \n. recurseOn t (`succ n)

-- just specify the good ones by a \hat{F}-algebra into some universe?

wsTerm : Nat -> Set;
wsTerm n = (t : Term) × goodTerm t n;

wsVar : (n k : Nat) -> lt k n -> wsTerm n;
wsVar n k p = « `var k, p » ;

wsApp : (n : Nat) -> wsTerm n -> wsTerm n -> wsTerm n;
wsApp n t1 t2 = «`app (fst t1) (fst t2), «snd t1, snd t2»»;

wsLam : (n : Nat) -> wsTerm (`succ n) -> wsTerm n;
wsLam n t = «`lam (fst t), snd t»;


wsTermInduction :
  (P : (n : Nat) -> wsTerm n -> Set 2) ->
  ((n k : Nat) -> (p : lt k n) -> P n (wsVar n k p)) ->
  ((n : Nat) -> (t1 t2 : wsTerm n) -> P n t1 -> P n t2 -> P n (wsApp n t1 t2)) ->
  ((n : Nat) -> (t : wsTerm (`succ n)) -> P (`succ n) t -> P n (wsLam n t)) ->
  (n : Nat) -> (t : wsTerm n) -> P n t;
wsTermInduction P pvar papp plam n «t,gt» =
  generalise gt then
  generalise n then
  inductionOn t with
    `var k.
      \n p.
      pvar n k p
    `app t1 t2.
      \n «p1,p2».
      papp n «t1,p1» «t2,p2» (inductionHypothesisFor t1 n p1) (inductionHypothesisFor t2 n p2)
    `lam t.
      \n p.
      plam n «t,p» (inductionHypothesisFor t (`succ n) p)

-- what is the F that describes this inductive type?

F : (Nat -> Set) -> (Nat -> Set) ;
F X n =   ((k : Nat) × lt k n)
        + X n × X n
        + X (`succ n);

-- is it possible to auto-generate this from the goodTerm thing above?
-- Or autogenerate both of them?

constr : (n : Nat) -> F wsTerm n -> wsTerm n;
constr n x = case x for x. wsTerm n with
               { inl p. wsVar n (fst p) (snd p)
               ; inr x. case x for x. wsTerm n with
                           { inl p. wsApp n (fst p) (snd p)
                           ; inr p. wsLam n p
                           }
               };
