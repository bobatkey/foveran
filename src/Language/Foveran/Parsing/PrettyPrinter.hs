{-# LANGUAGE OverloadedStrings #-}

module Language.Foveran.Parsing.PrettyPrinter
    ( ppAnnotTerm 
    , ppAnnotTermLev
    , ppPlain
    , ppIDataDecl
    )
    where

import           Data.String
import           Data.Rec (foldAnnot, Rec, foldRec)
import           Text.PrettyPrintPrec
import qualified Text.PrettyPrint as PP
import           Language.Foveran.Syntax.Display
import qualified Data.Text as T

name = fromString . T.unpack
names = hsep . map name

pprint :: TermCon PrecDoc -> PrecDoc
pprint (Var nm) = name nm
pprint (Set 0)  = "Set"
pprint (Set l)  = "Set" <+> int l

pprint (Pi bs t) = paren 10 $ sep (map doBinder bs ++ [t])
    where doBinder ([], t) = down t <+> "‚Üí"
          doBinder (nms,t) = "(" <> names nms <+> ":" <+> t <> ")" <+> "‚Üí"
pprint (Lam [] t)     = t -- FIXME this case shouldn't ever happen, but they get generated by the DataDecl stuff
pprint (Lam nms t)    = paren 10 (sep ["\x03bb" <> names nms <> ".", nest 2 t])
pprint (App t ts)     = paren 01 (sep (t:map (nest 2 . down) ts))

pprint (Prod t1 t2)      = paren 08 (down t1 <+> "√ó" <+> t2)
pprint (Sigma nms t1 t2) = paren 10 (hang ("(" <> names nms <+> ":" <+> t1 <> ")" <+> "√ó") 0 t2)
pprint (Proj1 t)         = paren 01 ("fst" <+> down t)
pprint (Proj2 t)         = paren 01 ("snd" <+> down t)
pprint (Pair t1 t2)      = "¬´" <> (sep $ punctuate "," [resetPrec t1, resetPrec t2]) <> "¬ª"

pprint (Sum t1 t2)             = paren 09 (down t1 <+> "+" <+> t2)
pprint (Inl t)                 = paren 01 ("inl" <+> down t)
pprint (Inr t)                 = paren 01 ("inr" <+> down t)
pprint (Case t x tP y tL z tR) =
    ("case" <+> t <+> "for" <+> name x <> "." <+> tP <+> "with")
    $$
    nest 2 (("{" <+> hang ("inl" <+> name y <> ".") 3 (resetPrec tL))
            $$
            (";" <+> hang ("inr" <+> name z <> ".") 3 (resetPrec tR))
            $$
            "}")
pprint Unit                = "ùüô"
pprint UnitI               = "()"
pprint Empty               = "ùüò"
pprint ElimEmpty           = "elimEmpty"

pprint (Eq t1 t2)          = paren 07 (sep [down t1, nest 2 "‚â°", t2])
pprint Refl                = "refl"
pprint (ElimEq t a e t1 t2) = paren 00 ("elimEq" <+> resetPrec t
                                        $$ nest 3 "for" <+> name a <+> name e <> "." <+> resetPrec t1
                                        $$ nest 2 "with" <+> t2)

pprint Desc                = "Desc"
pprint (Desc_K t)          = paren 01 ("‚ÄúK‚Äù" <+> down t)
pprint Desc_Id             = "‚ÄúId‚Äù"
pprint (Desc_Prod t1 t2)   = paren 08 (down t1 <+> "‚Äú√ó‚Äù" <+> t2)
pprint (Desc_Sum t1 t2)    = paren 09 (down t1 <+> "‚Äú+‚Äù" <+> t2)
pprint Desc_Elim           = "elimD"
pprint Sem                 = "sem"
pprint (Mu t)              = paren 01 ("¬µ" <+> down t)
pprint (Construct t)       = paren 01 ("construct" <+> down t)
pprint Induction           = "induction"

pprint IDesc               = "IDesc"
pprint (IDesc_Id t)        = paren 01 ("‚ÄúIId‚Äù" <+> down t)
pprint (IDesc_Sg t1 t2)    = paren 01 ("‚ÄúŒ£‚Äù" <+> (down t1 $$ down t2))
pprint (IDesc_Pi t1 t2)    = paren 01 ("‚ÄúŒ†‚Äù" <+> down t1 <+> down t2)
pprint IDesc_Elim          = "elimID"
pprint (MuI t1 t2)         = paren 01 ("¬µI" <+> down t1 <+> down t2)
pprint InductionI          = "inductionI"

ppAnnotTerm :: TermPos -> PP.Doc
ppAnnotTerm t = foldAnnot pprint t `atPrecedenceLevel` 10

ppAnnotTermLev :: Int -> TermPos -> PP.Doc
ppAnnotTermLev l t = foldAnnot pprint t `atPrecedenceLevel` l

ppPlain :: Rec TermCon -> PP.Doc
ppPlain t = foldRec pprint t `atPrecedenceLevel` 10

--------------------------------------------------------------------------------
ppIDataDecl :: IDataDecl -> PP.Doc
ppIDataDecl d = doc `atPrecedenceLevel` 10
    where
      doc = ("data" <+>
             name (dataName d) <+>
             hsep [ "(" <> name nm <+> ":" <+> fromDoc (ppAnnotTerm t) <> ")" | (nm,t) <- dataParameters d ] <+>
             ":" <+> fromDoc (ppAnnotTermLev 9 (dataIndexType d)) <+> "‚Üí" <+> "Set" <+> "where")
            $$ nest 2 (doConstructors (dataConstructors d))

      doConstructors []     = "{ };"
      doConstructors (c:cs) = vcat (("{" <+> doConstructor c) : map (\c -> ";" <+> doConstructor c) cs) $$ "};"

      doConstructor c = name (consName c) <+> ":" <+> sep (doBits (consBits c))

      doBits (ConsPi nm t xs) = ("(" <> name nm <+> ":" <+> fromDoc (ppAnnotTerm t) <> ")" <+> "‚Üí") : doBits xs
      doBits (ConsArr t xs)   = (fromDoc (ppAnnotTermLev 9 t) <+> "‚Üí") : doBits xs
      doBits (ConsEnd nm ts)  = [name nm <+> sep (map (fromDoc . ppAnnotTermLev 0) ts)]
